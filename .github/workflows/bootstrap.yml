---
name: "🥾 Bootstrap"
on:
  workflow_call:
    inputs:
      environment:
        description: "The GitHub environment name for the Azure deploy job."
        required: false
        default: "production"
        type: string
      azure_tenant_id:
        description: "The tenant ID in which the subscription exists."
        required: true
        type: string
      azure_client_id:
        description: "The client ID of the service principal for Azure login."
        required: true
        type: string
      azure_subscription_id:
        description: "The subscription ID in which to deploy the resources."
        required: true
        type: string
      location:
        description: "The Azure location to store the deployment metadata."
        required: false
        default: "westeurope"
        type: string
      scope:
        description: "The deployment scope. Accepted: tenant, mg, sub, group."
        required: false
        default: "sub"
        type: string
      management_group:
        description: "Management group to create deployment at for mg scope."
        required: false
        default: ""
        type: string
      resource_group:
        description: "Resource group to create deployment at for group scope."
        required: false
        default: ""
        type: string
      code_template:
        description: "The template address."
        required: false
        default: "main.bicep"
        type: string
      parameters:
        description: "Deployment parameter values."
        required: false
        default: ""
        type: string
      azure_providers:
        description: "Required Azure resource providers."
        required: false
        default: ""
        type: string
      azure_provider_wait_seconds:
        description: "Seconds to wait between each provider status check."
        required: false
        default: "10"
        type: string
      azure_provider_wait_count:
        description: "Times to check provider status before giving up."
        required: false
        default: "30"
        type: string
      psrule_modules:
        description: "A comma separated list of modules to use for analysis."
        required: false
        default: "PSRule.Rules.Azure"
        type: string
      psrule_baseline:
        description: "The name of a PSRule baseline to use."
        required: false
        default: "Azure.Default"
        type: string
      psrule_exclude:
        description: "Ignore rules for PSRule analysis."
        required: false
        default: ""
        type: string
      ace_version:
        description: "Azure Cost Estimator version."
        required: false
        default: "1.3"
        type: string
      merge_method:
        description: "The merge method to use after a successful deployment."
        required: false
        default: "squash"
        type: string
      keep_branch_after_merge:
        description: "Prevent deleting the branch after merge."
        required: false
        default: false
        type: boolean
      log_severity:
        description: "The log verbosity."
        required: false
        default: "ERROR"
        type: string
    secrets:
      AZURE_CLIENT_SECRET:
        description: "The service principal secret used for Azure login."
        required: false

defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

permissions: read-all

jobs:
  plan:
    name: "🗓️ Plan"
    if: >
      github.event_name == 'pull_request' ||
      github.event_name == 'pull_request_target'
    permissions:
      id-token: write # for azure login with OpenID Connect (OIDC)
      actions: read # for workflow details (upload artifacts needs write)
      contents: read # for checkout
      pull-requests: write # for update issue comment
    runs-on: ubuntu-latest
    steps:
      - name: Add comment
        id: add_comment
        if: >
          github.event_name == 'pull_request' ||
          github.event_name == 'pull_request_target'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const REPOSITORY = process.env.GITHUB_REPOSITORY;
            const HEAD_SHA = process.env.GITHUB_SHA;
            const repo_url = `${context.serverUrl}/${REPOSITORY}`;
            const run_url = `${repo_url}/actions/runs/${context.runId}`;
            const prNo = context.issue.number;
            const actor = `@${context.actor}`;
            const body = `## Job started to validate deployment... ⌛

            | Job | Commit | Actor |
            | --- | --- | --- |
            | [#${context.runNumber}](${run_url}) | ${HEAD_SHA} | ${actor} |`;
            const repo = {
              owner: context.repo.owner,
              repo: context.repo.repo,
            };
            try {
              core.info(`Create comment:\n${body}`);
              const response_cc = await github.rest.issues.createComment({
                ...repo,
                issue_number: prNo,
                body: body,
              });
              if (response_cc.status == 201 && response_cc.data) {
                core.setOutput('id', response_cc.data.id);
              } else {
                const reason = `${prNo}. ${JSON.stringify(response_cc)}`;
                core.setFailed(`Failed to create comment for PR ${reason}`);
              }
            } catch (e) {
              core.setFailed(`Failed to comment at start. ${e}`);
            }

      - name: Checkout head ref (src)
        id: checkout_src
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 1

      - name: Check Client secret
        id: client_secret
        run: |
          if [ '${{ secrets.AZURE_CLIENT_SECRET }}' = '' ]; then
            echo "Secret is not present, Log in to Azure with federated credentials."
            echo "exist=false" >> "$GITHUB_OUTPUT"
          else
            echo "Secret is not present, Log in to Azure with secret."
            echo "exist=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Log in to Azure (Federated)
        id: login_open_id
        if: steps.client_secret.outputs.exist != 'true'
        uses: azure/login@v1
        with:
          client-id: ${{ inputs.azure_client_id }}
          tenant-id: ${{ inputs.azure_tenant_id }}
          subscription-id: ${{ inputs.azure_subscription_id }}

      - name: Log in to Azure (Secret)
        id: login_secret
        if: steps.client_secret.outputs.exist == 'true'
        env:
          CLIENT_ID: ${{ inputs.azure_client_id }}
          TENANT_ID: ${{ inputs.azure_tenant_id }}
          SEVERITY: ${{ inputs.log_severity }}
        run: |
          case "${SEVERITY}" in
            ERROR)   log_severity=' --only-show-errors';;
            VERBOSE) log_severity=' --verbose';;
            DEBUG)   log_severity=' --debug';;
            *)       log_severity='';;
          esac
          az login --service-principal -t ${TENANT_ID} -u ${CLIENT_ID} \
            -p '${{ secrets.AZURE_AD_CLIENT_SECRET }}' $log_severity

      - name: Bicep install
        id: bicep_install
        if: endsWith(inputs.code_template, '.bicep')
        env:
          SEVERITY: ${{ inputs.log_severity }}
        run: |
          cmd="az bicep install"
          log='bicep_install.txt'
          case "${SEVERITY}" in
            ERROR)   cmd+=' --only-show-errors';;
            VERBOSE) cmd+=' --verbose';;
            DEBUG)   cmd+=' --debug';;
          esac
          az config set bicep.use_binary_from_path=False >/dev/null 2>&1
          echo "Run: ${cmd}" | tee -a $log
          echo "Azure CLI $(az version | jq -r '."azure-cli"')" | tee -a $log
          eval "${cmd}" 1> >(tee -a $log) 2> >(tee -a $log >&2)
          exit_code=$?
          echo 'Installed extensions:' | tee -a $log
          az version --query extensions -o yaml | tee -a $log
          if [ $exit_code -ne 0 ]; then
            echo -e "\nExit code: ${exit_code}"
            if test -f $log; then
              result=$(cat $log)
              if test -n $result; then
                {
                  echo 'result<<e9febe842f46ddcd'
                  echo -e '## Bicep install\n'
                  echo -e "Failed with exit code ${exit_code}!\n"
                  echo '```text'
                  echo "${result}"
                  echo -e '```\n'
                  echo 'e9febe842f46ddcd'
                } >> "$GITHUB_OUTPUT"
              fi
            fi
          fi

      - name: Bicep build
        id: bicep_build
        if: >
          endsWith(inputs.code_template, '.bicep') &&
          !startsWith(inputs.code_template, '/subscriptions/')
        env:
          TEMPLATE: ${{ inputs.code_template }}
          SEVERITY: ${{ inputs.log_severity }}
        run: |
          if [[ $TEMPLATE == http* ]]; then
            curl -o ${TEMPLATE##*/} -sSL $TEMPLATE 1> >(tee -a $log) 2> >(tee -a $log >&2)
            TEMPLATE="${TEMPLATE##*/}"
          fi
          out_file="${TEMPLATE/.bicep/.json}"
          cmd="az bicep build --file ${TEMPLATE} --outfile ${out_file}"
          log='bicep_build.txt'
          case "${SEVERITY}" in
            ERROR)   cmd+=' --only-show-errors';;
            VERBOSE) cmd+=' --verbose';;
            DEBUG)   cmd+=' --debug';;
          esac
          echo "Run: ${cmd}" | tee -a $log
          eval "${cmd}" 1> >(tee -a $log) 2> >(tee -a $log >&2)
          exit_code=$?
          if test -f $log; then
            result=$(cat $log)
            {
              echo 'result<<0047393e7aacb9de'
              echo -e '## Bicep build\n'
              if [ $exit_code -ne 0 ]; then
                echo -e "Failed with exit code ${exit_code}!\n"
              else
                echo -e "Successfully built ${out_file}\n"
              fi
              if test -n "${result}"; then
                echo -e '<details><summary>Click to expand details</summary>\n'
                echo '```text'
                echo "${result}"
                echo -e '```\n'
                echo -e '</details>\n'
              fi
              echo "0047393e7aacb9de"
            } >> "$GITHUB_OUTPUT"
          fi

      - name: Bicep param build
        id: bicep_build_params
        if: endsWith(inputs.parameters, '.bicepparam')
        env:
          TEMPLATE: ${{ inputs.parameters }}
          SEVERITY: ${{ inputs.log_severity }}
        run: |
          if [[ $TEMPLATE == http* ]]; then
            curl -o ${TEMPLATE##*/} -sSL $TEMPLATE 1> >(tee -a $log) 2> >(tee -a $log >&2)
            TEMPLATE="${TEMPLATE##*/}"
          fi
          out_file="${TEMPLATE/.bicepparam/.parameters.json}"
          cmd="az bicep build-params --file ${TEMPLATE} --outfile ${out_file}"
          log='bicep_build_params.txt'
          case "${SEVERITY}" in
            ERROR)   cmd+=' --only-show-errors';;
            VERBOSE) cmd+=' --verbose';;
            DEBUG)   cmd+=' --debug';;
          esac
          echo "Run: ${cmd}" | tee -a $log
          eval "${cmd}" 1> >(tee -a $log) 2> >(tee -a $log >&2)
          exit_code=$?
          if test -f $log; then
            result=$(cat $log)
            {
              echo 'result<<5a82231c8acf1cbd'
              echo -e '## Bicep build-params\n'
              if [ $exit_code -ne 0 ]; then
                echo -e "Failed with exit code ${exit_code}!\n"
              else
                echo -e "Successfully built ${out_file}\n"
              fi
              if test -n "${result}"; then
                echo -e '<details><summary>Click to expand details</summary>\n'
                echo '```text'
                echo "${result}"
                echo -e '```\n'
                echo -e '</details>\n'
              fi
              echo "5a82231c8acf1cbd"
            } >> "$GITHUB_OUTPUT"
          fi

      - name: PSRule configuration
        id: ps_rule_config
        env:
          PSRULE_MODULES: ${{ inputs.psrule_modules }}
          PSRULE_RULE_EXCLUDE: ${{ inputs.psrule_exclude }}
        run: |
          if test -f ps-rule.yaml; then
            echo 'Use existing ps-rule.yaml'
            exit
          fi
          cat > ps-rule.yaml << 81d174f4ee42ba3f
          binding:
            preferTargetInfo: true
            targetType:
              - type
              - resourceType
          configuration:
            AZURE_PARAMETER_FILE_EXPANSION: true
            AZURE_BICEP_FILE_EXPANSION: true
            AZURE_BICEP_FILE_EXPANSION_TIMEOUT: 10
          execution:
            unprocessedObject: Ignore
          include:
            module: [${PSRULE_MODULES}]
          input:
            ignoreUnchangedPath: true
          output:
            culture:
              - en-US
            footer: RuleCount
            format: Markdown
            jobSummaryPath: ps_rule_summary.md
            outcome: Processed
            style: GitHubActions
          rule:
            exclude: [${PSRULE_RULE_EXCLUDE}]
          81d174f4ee42ba3f

      - name: PSRule analysis
        id: ps_rule
        uses: microsoft/ps-rule@v2
        with:
          inputType: inputPath
          modules: ${{ inputs.psrule_modules }}
          baseline: ${{ inputs.psrule_baseline }}
          outputFormat: Markdown
          outputPath: ps_rule.md
          summary: false

      - name: PSRule report
        id: ps_rule_report
        if: failure() || success()
        run: |
          if test -f ps_rule.md; then
            result=$(cat ps_rule.md)
            if [ "${result}" = "# PSRule" ]; then
              echo 'PSRule report is empty'
            else
              current_pwd="$(pwd)/"
              {
                echo "result<<eddc1726f9bb37b6"
                echo -e '## PSRule\n'
                if test -f ps_rule_summary.md; then
                  result2=$(cat ps_rule_summary.md)
                  echo -e "${result2}\n" | sed -e ':a' -e 'N' -e '$!ba' \
                    -e 's|# PSRule result summary\n\n||g' \
                    -e 's|## |### |g'
                fi
                echo '<details><summary>Click to expand details</summary>'
                echo "${result}" | sed -e ':a' -e 'N' -e '$!ba' \
                  -e 's|# PSRule\n\n||g' \
                  -e 's|## |### |g' \
                  -e "s|${current_pwd}||g"
                echo -e '</details>\n'
                echo "eddc1726f9bb37b6"
              } >> "$GITHUB_OUTPUT"
            fi
          fi

      - name: Deployment what-if
        id: what_if
        env:
          SCOPE: ${{ inputs.scope }}
          TEMPLATE: ${{ inputs.code_template }}
          TEMPLATE_PARAMS: ${{ inputs.parameters }}
          MANAGEMENT_GROUP: ${{ inputs.management_group }}
          SUBSCRIPTION_ID: ${{ inputs.azure_subscription_id }}
          RESOURCE_GROUP: ${{ inputs.resource_group }}
          LOCATION: ${{ inputs.location }}
          SEVERITY: ${{ inputs.log_severity }}
        run: |
          if [[ $TEMPLATE == http* ]]; then
            TEMPLATE="${TEMPLATE##*/}"
          fi
          if [[ $TEMPLATE_PARAMS == http* ]]; then
            TEMPLATE_PARAMS="${TEMPLATE_PARAMS##*/}"
          fi
          cmd="az deployment ${SCOPE} what-if --name whatif-${GITHUB_RUN_ID}"
          log='what_if.txt'
          if [[ $TEMPLATE == http* ]]; then
            cmd+=" --template-uri ${TEMPLATE}"
          elif [[ $TEMPLATE == /subscriptions/* ]]; then
            cmd+=" --template-spec ${TEMPLATE}"
          else
            cmd+=" --template-file ${TEMPLATE}"
          fi
          if test -n "${TEMPLATE_PARAMS}"; then
            cmd+=" --parameters ${TEMPLATE_PARAMS}"
          fi
          if ! [ "${SCOPE}" = 'group' ]; then
            cmd+=" --location ${LOCATION}"
          fi
          if [ "${SCOPE}" = 'mg' ]; then
            cmd+=" --management-group-id ${MANAGEMENT_GROUP}"
          fi
          if [ "${SCOPE}" = 'group' ]; then
            cmd+=" --resource-group ${RESOURCE_GROUP}"
          fi
          case "${SEVERITY}" in
            ERROR)   cmd+=' --only-show-errors';;
            VERBOSE) cmd+=' --verbose';;
            DEBUG)   cmd+=' --debug';;
          esac
          cmd+=' --exclude-change-types Ignore NoChange --no-prompt true'
          az account set -s ${SUBSCRIPTION_ID}
          echo "Run: ${cmd}" | tee -a $log
          eval "${cmd}" 1> >(tee -a $log) 2> >(tee -a $log >&2)
          exit_code=$?
          if test -f $log; then
            result=$(cat $log | sed -E 's/^([[:space:]]+)([-+])/\2\1/g')
            {
              echo 'result<<7d9efa072f5be230'
              echo -e '## What-if\n'
              if [ $exit_code -ne 0 ]; then
                echo -e "Failed with exit code ${exit_code}!\n"
              fi
              if test -n "${result}"; then
                echo -e '<details><summary>Click to expand details</summary>\n'
                echo '```diff'
                echo "${result}"
                echo -e '```\n'
                echo -e '</details>\n'
              fi
              echo "7d9efa072f5be230"
            } >> "$GITHUB_OUTPUT"
          fi

      - name: Estimate cost
        id: cost
        if: >
          !startsWith(inputs.code_template, '/subscriptions/')
        env:
          SCOPE: ${{ inputs.scope }}
          TEMPLATE: ${{ inputs.code_template }}
          TEMPLATE_PARAMS: ${{ inputs.parameters }}
          MANAGEMENT_GROUP: ${{ inputs.management_group }}
          SUBSCRIPTION_ID: ${{ inputs.azure_subscription_id }}
          RESOURCE_GROUP: ${{ inputs.resource_group }}
          LOCATION: ${{ inputs.location }}
          ACE_VERSION: ${{ inputs.ace_version }}
        run: |
          CODE_TEMPLATE="${TEMPLATE##*/}"
          if [[ $TEMPLATE == http* ]]; then
            TEMPLATE="${TEMPLATE##*/}"
          fi
          if [[ $TEMPLATE_PARAMS == http* ]]; then
            TEMPLATE_PARAMS="${TEMPLATE_PARAMS##*/}"
          fi
          TEMPLATE="${TEMPLATE/.bicep/.json}"
          if ! test -f ${TEMPLATE}; then
            echo "Skip: Unable to get ${CODE_TEMPLATE}."
            exit
          fi
          cmd="./azure-cost-estimator"
          log='cost.txt'
          server='https://github.com'
          org='TheCloudTheory'
          repo='arm-estimator'
          file='linux-x64.zip'
          url="${server}/${org}/${repo}/releases/download/${ACE_VERSION}/${file}"
          echo "Run: curl -o ${file} -sSL ${url}" | tee -a $log
          curl -o ${file} -sSL ${url}
          unzip -q ${file}
          chmod +x ./azure-cost-estimator
          case "${SCOPE}" in
            tenant) cmd+=" ${SCOPE} ${TEMPLATE} ${LOCATION}";;
            mg)     cmd+=" ${SCOPE} ${TEMPLATE} ${MANAGEMENT_GROUP} ${LOCATION}";;
            sub)    cmd+=" ${SCOPE} ${TEMPLATE} ${SUBSCRIPTION_ID} ${LOCATION}";;
            group)  cmd+=" ${TEMPLATE} ${SUBSCRIPTION_ID} ${RESOURCE_GROUP}";;
          esac
          if test -n "${TEMPLATE_PARAMS}"; then
            cmd+=" --parameters ${TEMPLATE_PARAMS/.bicepparam/.parameters.json}"
          fi
          cmd+=" --disableDetailedMetrics --generateJsonOutput --jsonOutputFilename cost_output.json"
          echo "Run: ${cmd}" | tee -a $log
          eval "${cmd}" 1> >(tee -a $log) 2> >(tee -a $log >&2) || true
          exit_code=$?
          if test -f cost_output.json; then
            {
              echo "total_cost=$(cat cost_output.json | jq -r '.TotalCost')"
              echo "currency=$(cat cost_output.json | jq -r '.Currency')"
            } >> "$GITHUB_OUTPUT"
          fi
          if test -f $log; then
            result=$(cat $log)
            {
              echo 'result<<e3599a2c6b8bc912'
              echo -e '## Cost\n'
              if [ $exit_code -ne 0 ]; then
                echo -e "Failed with exit code ${exit_code}!\n"
              fi
              if test -n "${result}"; then
                echo -e '<details><summary>Click to expand details</summary>\n'
                echo '```text'
                echo "${result}"
                echo -e '```\n'
                echo -e '</details>\n'
              fi
              echo "e3599a2c6b8bc912"
            } >> "$GITHUB_OUTPUT"
          fi

      - name: Job cancelled
        id: job_cancelled
        if: cancelled()
        shell: bash
        run: echo 'JOB_STATUS=cancelled' >> "$GITHUB_ENV"

      - name: Job failed
        id: job_failed
        if: failure()
        shell: bash
        run: echo 'JOB_STATUS=failed' >> "$GITHUB_ENV"

      - name: Merge results
        id: merge_results
        if: always()
        env:
          BICEP_INSTALL: ${{ steps.bicep_install.outputs.result }}
          BICEP_BUILD: ${{ steps.bicep_build.outputs.result }}
          BICEP_BUILD_PARAM: ${{ steps.bicep_build_params.outputs.result }}
          PS_RULE_REPORT: ${{ steps.ps_rule_report.outputs.result }}
          WHAT_IF: ${{ steps.what_if.outputs.result }}
          COST: ${{ steps.cost.outputs.result }}
          JOB_STATUS: ${{ env.JOB_STATUS }}
        run: |
          case "${JOB_STATUS}" in
            cancelled) JOB_STATUS=$(echo -e "# Plan\n\nJob cancelled ❌\n\nJob");;
            failed)    JOB_STATUS=$(echo -e "# Plan\n\nJob failed ⛔\n\nJob");;
            *)         JOB_STATUS=$(echo -e "# Plan\n\nJob");;
          esac
          all_results="${BICEP_INSTALL}"
          all_results+="${BICEP_BUILD}"
          all_results+="${BICEP_BUILD_PARAM}"
          all_results+="${PS_RULE_REPORT}"
          all_results+="${WHAT_IF}"
          all_results+="${COST}"
          repo_url="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}"
          run_url="${repo_url}/actions/runs/${GITHUB_RUN_ID}"
          job="Please see job [#${GITHUB_RUN_NUMBER}](${run_url}) for details!"
          if [ ${#all_results} -gt 64000 ]; then
            result=$(echo -e "${JOB_STATUS} output is too large ❗\n\n${job}")
          elif test -z "${all_results}"; then
            result=$(echo -e "${JOB_STATUS} output is missing ❓\n\n${job}")
          else
            result=$(echo -e "${JOB_STATUS} completed ✅\n\n${all_results}")
          fi
          echo "${result}" >> "$GITHUB_STEP_SUMMARY"
          {
            echo 'result<<6f3a17c3a625f201'
            echo "${result}"
            echo "6f3a17c3a625f201"
          } >> "$GITHUB_OUTPUT"

      - name: Comment when done
        id: comment_when_done
        if: >
          always() &&
          (
            github.event_name == 'pull_request' ||
            github.event_name == 'pull_request_target'
          )
        uses: actions/github-script@v7
        env:
          MERGE_RESULTS: ${{ steps.merge_results.outputs.result }}
          EVENT_COMMENT_ID: ${{ steps.add_comment.outputs.id }}
          SUBSCRIPTION_ID: ${{ inputs.azure_subscription_id }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const {MERGE_RESULTS} = process.env ?? '';
            const {EVENT_COMMENT_ID} = process.env ?? 0;
            const {SUBSCRIPTION_ID} = process.env;
            const HEAD_SHA = process.env.GITHUB_SHA;
            const HEAD_REF = process.env.GITHUB_REF;
            const REPOSITORY = process.env.GITHUB_REPOSITORY;
            const repo_url = `${context.serverUrl}/${REPOSITORY}`;
            const run_url = `${repo_url}/actions/runs/${context.runId}`;
            const prNo = context.issue.number;
            const actor = `@${context.actor}`;
            const repo = {
              owner: context.repo.owner,
              repo: context.repo.repo,
            };
            const body = `${MERGE_RESULTS}

            ### Actions

            - Review and approve the plan.
            - Update if needed. Push updates to the [${HEAD_REF}](${repo_url}/tree/${HEAD_REF}) branch.

            The deployment will start when the pull request is reviewed and approved.

            | Job | Commit | Actor | Subscription |
            | --- | --- | --- | --- |
            | [#${context.runNumber}](${run_url}) | ${HEAD_SHA} | ${actor} | ${SUBSCRIPTION_ID} |`;
            const comment_id = parseInt(EVENT_COMMENT_ID);
            if (isNaN(comment_id) || comment_id == 0) {
              core.info(`Create comment:\n${body}`);
              try {
                const response_cc = await github.rest.issues.createComment({
                  ...repo,
                  issue_number: prNo,
                  body: body,
                });
                if (response_cc.status > 201 || !response_cc.data) {
                  const reason = `${prNo}. ${JSON.stringify(response_cc)}`;
                  core.setFailed(`Failed to create comment for PR ${reason}`);
                }
              } catch (e) {
                core.setFailed(`Failed to comment when done: ${e}`);
              }
            } else {
              core.info(`Update comment ${comment_id}:\n${body}`);
              try {
                const response = await github.rest.issues.updateComment({
                  ...repo,
                  comment_id: comment_id,
                  body: body,
                });
                if (response.status != 200 || !response.data) {
                  const reason = `${comment_id}. ${JSON.stringify(response)}`;
                  core.setFailed(`Failed to update comment ${reason}`);
                }
              } catch (e) {
                core.setFailed(`Failed to update comment ${comment_id}: ${e}`);
              }
            }

      - name: Dump github context
        id: dump_github_context
        if: >
          failure() || (
            success() &&
            inputs.log_severity != 'ERROR'
          )
        env:
          GH_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "${GH_CONTEXT}"

      - name: Dump steps context
        id: dump_steps_context
        if: >
          failure() || (
            success() &&
            inputs.log_severity != 'ERROR'
          )
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: |
          echo "${STEPS_CONTEXT}"

      - name: Print variables and event
        id: dump_env
        if: >
          failure() || (
            success() &&
            inputs.log_severity != 'ERROR'
          )
        uses: hmarr/debug-action@v2

      - name: Upload artifacts
        id: upload_artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: plan_logs
          path: |
            bicep_install.txt
            bicep_build.txt
            bicep_build_params.txt
            ps_rule.md
            ps_rule_summary.md
            ps-rule.yaml
            what_if.txt
            cost_output.json
            cost.txt
          if-no-files-found: ignore

  deploy:
    name: "🏃 Deploy"
    if: >
      github.event_name == 'workflow_dispatch' ||
      (
        github.event_name == 'pull_request_review' &&
        github.event.review.state == 'APPROVED'
      )
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write # for azure login with OpenID Connect (OIDC)
      actions: read # for workflow details (upload artifacts needs write)
      contents: read # for checkout (needs read) (auto merge need write)
      pull-requests: write # for update issue comment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout head ref (src)
        id: checkout_src
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 1

      - name: Check Client secret
        id: client_secret
        run: |
          if [ '${{ secrets.AZURE_CLIENT_SECRET }}' = '' ]; then
            echo "Secret is not present, Log in to Azure with federated credentials."
            echo "exist=false" >> "$GITHUB_OUTPUT"
          else
            echo "Secret is not present, Log in to Azure with secret."
            echo "exist=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Log in to Azure (Federated)
        id: login_open_id
        if: steps.client_secret.outputs.exist != 'true'
        uses: azure/login@v1
        with:
          client-id: ${{ inputs.azure_client_id }}
          tenant-id: ${{ inputs.azure_tenant_id }}
          subscription-id: ${{ inputs.azure_subscription_id }}

      - name: Log in to Azure (Secret)
        id: login_secret
        if: steps.client_secret.outputs.exist == 'true'
        env:
          CLIENT_ID: ${{ inputs.azure_client_id }}
          TENANT_ID: ${{ inputs.azure_tenant_id }}
          SEVERITY: ${{ inputs.log_severity }}
        run: |
          case "${SEVERITY}" in
            ERROR)   log_severity=' --only-show-errors';;
            VERBOSE) log_severity=' --verbose';;
            DEBUG)   log_severity=' --debug';;
            *)       log_severity='';;
          esac
          az login --service-principal -t ${TENANT_ID} -u ${CLIENT_ID} \
            -p '${{ secrets.AZURE_AD_CLIENT_SECRET }}' $log_severity

      - name: Bicep install
        id: bicep_install
        if: endsWith(inputs.code_template, '.bicep')
        env:
          SEVERITY: ${{ inputs.log_severity }}
        run: |
          cmd="az bicep install"
          log='bicep_install.txt'
          case "${SEVERITY}" in
            ERROR)   cmd+=' --only-show-errors';;
            VERBOSE) cmd+=' --verbose';;
            DEBUG)   cmd+=' --debug';;
          esac
          az config set bicep.use_binary_from_path=False >/dev/null 2>&1
          echo "Run: ${cmd}" | tee -a $log
          echo "Azure CLI $(az version | jq -r '."azure-cli"')" | tee -a $log
          eval "${cmd}" 1> >(tee -a $log) 2> >(tee -a $log >&2)
          exit_code=$?
          echo 'Installed extensions:' | tee -a $log
          az version --query extensions -o yaml | tee -a $log
          if [ $exit_code -ne 0 ]; then
            echo -e "\nExit code: ${exit_code}"
            if test -f $log; then
              result=$(cat $log)
              if test -n $result; then
                {
                  echo 'result<<8cfeacefe1900f1b'
                  echo -e '## Bicep install\n'
                  echo -e "Failed with exit code ${exit_code}!\n"
                  echo '```text'
                  echo "${result}"
                  echo -e '```\n'
                  echo '8cfeacefe1900f1b'
                } >> "$GITHUB_OUTPUT"
              fi
            fi
          fi

      - name: Deployment validate
        id: validate
        env:
          SCOPE: ${{ inputs.scope }}
          TEMPLATE: ${{ inputs.code_template }}
          TEMPLATE_PARAMS: ${{ inputs.parameters }}
          MANAGEMENT_GROUP: ${{ inputs.management_group }}
          SUBSCRIPTION_ID: ${{ inputs.azure_subscription_id }}
          RESOURCE_GROUP: ${{ inputs.resource_group }}
          LOCATION: ${{ inputs.location }}
          SEVERITY: ${{ inputs.log_severity }}
          PROVIDERS: ${{ inputs.azure_providers }}
        run: |
          if [[ $TEMPLATE_PARAMS == http* ]]; then
            curl -o ${TEMPLATE_PARAMS##*/} -sSL $TEMPLATE_PARAMS 1> >(tee -a $log) 2> >(tee -a $log >&2)
            TEMPLATE_PARAMS="${TEMPLATE_PARAMS##*/}"
          fi
          cmd="az deployment ${SCOPE} validate --name val-${GITHUB_RUN_ID}"
          log='validate.txt'
          if [[ $TEMPLATE == http* ]]; then
            cmd+=" --template-uri ${TEMPLATE}"
          elif [[ $TEMPLATE == /subscriptions/* ]]; then
            cmd+=" --template-spec ${TEMPLATE}"
          else
            cmd+=" --template-file ${TEMPLATE}"
          fi
          if test -n "${TEMPLATE_PARAMS}"; then
            cmd+=" --parameters ${TEMPLATE_PARAMS}"
          fi
          if ! [ "${SCOPE}" = 'group' ]; then
            cmd+=" --location ${LOCATION}"
          fi
          if [ "${SCOPE}" = 'mg' ]; then
            cmd+=" --management-group-id ${MANAGEMENT_GROUP}"
          fi
          if [ "${SCOPE}" = 'group' ]; then
            cmd+=" --resource-group ${RESOURCE_GROUP}"
          fi
          case "${SEVERITY}" in
            ERROR)   cmd+=' --only-show-errors';;
            VERBOSE) cmd+=' --verbose';;
            DEBUG)   cmd+=' --debug';;
          esac
          cmd+=' --no-prompt true -o json'
          az account set -s ${SUBSCRIPTION_ID}
          echo "Run: ${cmd}"
          eval "${cmd}" 1> >(tee -a $log) 2> >(tee -a $log >&2)
          exit_code=$?
          providers_in_code=''
          if test -f $log; then
            json_object=$(
              cat $log | sed -e '/^ERROR/d' -e '/^WARNING/d' -e '/^INFO/d' \
                -e '/^[[:space:]]*$/d'
            )
            if [[ "${json_object}" == {* ]]; then
              providers_in_code=$(
                echo "${json_object}" | \
                  jq '.properties.providers | map(.namespace) | join(" ")'
              )
            fi
            result=$(
              cat $log | sed -n -e '/^ERROR/p' -e '/^WARNING/p' -e '/^INFO/p'
            )
            {
              echo 'result<<7444dac159e4ee0f'
              echo -e '## Validate\n'
              if [ $exit_code -ne 0 ]; then
                echo -e "Failed with exit code ${exit_code}!\n"
              fi
              if test -n "${result}"; then
                echo '```text'
                echo "${result}"
                echo -e '```\n'
              fi
              if test -n "${json_object}"; then
                echo -e '<details><summary>Click to expand details</summary>\n'
                echo '```json'
                echo "${json_object}"
                echo -e '```\n'
                echo -e '</details>\n'
              fi
              echo "7444dac159e4ee0f"
            } >> "$GITHUB_OUTPUT"
          fi
          providers=$(echo "${PROVIDERS} ${providers_in_code}" | xargs)
          echo "providers=${providers}" >> "$GITHUB_OUTPUT"

      - name: Check Azure providers
        id: azure_providers
        if: steps.validate.outputs.providers != ''
        env:
          PROVIDERS: ${{ steps.validate.outputs.providers }}
          WAIT_SECONDS: ${{ inputs.azure_provider_wait_seconds }}
          WAIT_COUNT: ${{ inputs.azure_provider_wait_count }}
          SUBSCRIPTION_ID: ${{ inputs.azure_subscription_id }}
          SEVERITY: ${{ inputs.log_severity }}
        run: |
          providers=($(echo "${PROVIDERS}" | tr ' ' '\n' | sort -u))
          log='azure_providers.txt'
          declare -a registeringProviders=()
          case "${SEVERITY}" in
            ERROR)   log_severity=' --only-show-errors';;
            VERBOSE) log_severity=' --verbose';;
            DEBUG)   log_severity=' --debug';;
            *)       log_severity='';;
          esac
          az account set -s ${SUBSCRIPTION_ID}
          registered=($(
            az provider list \
              --query "[?registrationState=='Registered'].namespace" \
              -o tsv $log_severity
          ))
          echo -e "Registered providers:\n${registered}\n" | tee -a $log
          registered=$(echo " ${registered[*]} " | tr '[:upper:]' '[:lower:]')
          for provider in "${providers[@]}"; do
            value=$(echo " ${provider} " | tr '[:upper:]' '[:lower:]')
            if [[ ! " ${registered[*]} " =~ ${value} ]]; then
              echo "Register ${provider}" | tee -a $log
              az provider register --consent-to-permissions \
                --namespace $provider ${log_severity}
              registeringProviders+=($provider)
            fi
          done
          for provider in "${registeringProviders[@]}"; do
            state='Registering'
            timesTried=0
            while [ "${state}" != 'Registered' ] || \
                  [ $timesTried -gt $WAIT_COUNT ]
            do
              echo "Waiting for ${provider} to register..."
              state=$(
                az provider show --namespace $provider \
                  --query "registrationState" -o tsv $log_severity
              )
              ((timesTried++))
              sleep $WAIT_SECONDS
            done
            if ! [ "${state}" = 'Registered' ]; then
              echo -e "Timeout: ${provider} in ${state} state..." | tee -a $log
            fi
          done
          if test -f $log; then
            result=$(cat $log)
            {
              echo 'result<<c6502444035f7f53'
              echo -e '## Azure resource providers\n'
              if test -n "${result}"; then
                echo -e "${result}\n"
              fi
              echo "c6502444035f7f53"
            } >> "$GITHUB_OUTPUT"
          fi

      - name: Deploy
        id: deploy
        env:
          SCOPE: ${{ inputs.scope }}
          TEMPLATE: ${{ inputs.code_template }}
          TEMPLATE_PARAMS: ${{ inputs.parameters }}
          MANAGEMENT_GROUP: ${{ inputs.management_group }}
          SUBSCRIPTION_ID: ${{ inputs.azure_subscription_id }}
          RESOURCE_GROUP: ${{ inputs.resource_group }}
          LOCATION: ${{ inputs.location }}
          SEVERITY: ${{ inputs.log_severity }}
        run: |
          if [[ $TEMPLATE_PARAMS == http* ]]; then
            curl -o ${TEMPLATE_PARAMS##*/} -sSL $TEMPLATE_PARAMS 1> >(tee -a $log) 2> >(tee -a $log >&2)
            TEMPLATE_PARAMS="${TEMPLATE_PARAMS##*/}"
          fi
          cmd="az deployment ${SCOPE} create --name deploy-${GITHUB_RUN_ID}"
          log='deploy.txt'
          if [[ $TEMPLATE == http* ]]; then
            cmd+=" --template-uri ${TEMPLATE}"
          elif [[ $TEMPLATE == /subscriptions/* ]]; then
            cmd+=" --template-spec ${TEMPLATE}"
          else
            cmd+=" --template-file ${TEMPLATE}"
          fi
          if test -n "${TEMPLATE_PARAMS}"; then
            cmd+=" --parameters ${TEMPLATE_PARAMS}"
          fi
          if ! [ "${SCOPE}" = 'group' ]; then
            cmd+=" --location ${LOCATION}"
          fi
          if [ "${SCOPE}" = 'mg' ]; then
            cmd+=" --management-group-id ${MANAGEMENT_GROUP}"
          fi
          if [ "${SCOPE}" = 'group' ]; then
            cmd+=" --resource-group ${RESOURCE_GROUP}"
          fi
          case "${SEVERITY}" in
            ERROR)   cmd+=' --only-show-errors';;
            VERBOSE) cmd+=' --verbose';;
            DEBUG)   cmd+=' --debug';;
          esac
          cmd+=' --no-prompt true'
          az account set -s ${SUBSCRIPTION_ID}
          echo "Run: ${cmd}" | tee -a $log
          eval "${cmd}" 1> >(tee -a $log) 2> >(tee -a $log >&2)
          exit_code=$?
          if test -f $log; then
            result=$(cat $log)
            {
              echo 'result<<f4b6bcbb24d55a01'
              echo -e '## Deploy\n'
              if [ $exit_code -ne 0 ]; then
                echo -e "Failed with exit code ${exit_code}!\n"
              fi
              if test -n "${result}"; then
                echo -e '<details><summary>Click to expand details</summary>\n'
                echo '```json'
                echo "${result}"
                echo -e '```\n'
                echo -e '</details>\n'
              fi
              echo "f4b6bcbb24d55a01"
            } >> "$GITHUB_OUTPUT"
          fi

      - name: Auto merge
        id: auto_merge
        if: >
          github.event_name == 'pull_request_review' &&
          github.event.review.state == 'APPROVED' &&
          contains(fromJSON('["merge", "squash", "rebase"]'), inputs.merge_method)
        uses: actions/github-script@v7
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          HEAD_REF: ${{ github.event.pull_request.head.ref }}
          MERGE_METHOD: ${{ inputs.merge_method }}
          KEEP_BRANCH: ${{ inputs.keep_branch_after_merge }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const {PR_NUMBER} = process.env;
            const {HEAD_REF} = process.env;
            const {MERGE_METHOD} = process.env;
            const repo = {
              owner: context.repo.owner,
              repo: context.repo.repo,
            };
            let message = '';
            try {
              const response = await github.rest.pulls.merge({
                ...repo,
                pull_number: PR_NUMBER,
                merge_method: MERGE_METHOD,
              });
              if (response.status == 200 && response.data) {
                message = `${response.data.message}.`;
                if (KEEP_BRANCH == 'false') {
                  const response_dr = await github.rest.git.deleteRef({
                    ...repo,
                    ref: `heads/${HEAD_REF}`,
                  });
                  if (response_dr.status == 204) {
                    message += `\nThe ${HEAD_REF} branch was deleted.`);
                  } else {
                    message += `Failed to delete the ${HEAD_REF} branch 🚫. ${JSON.stringify(response_dr)}`;
                  }
                }
              } else {
                message = `Failed to merge pull request ${PR_NUMBER} into the ${HEAD_REF} branch 🚫. ${JSON.stringify(response)}`;
              }
            } catch (e) {
              message = `Auto merge failed 🚫. ${e}`;
            }
            if (message.includes('Failed')) {
              core.setFailed(message);
            } else {
              core.info(message);
            }
            return `## Auto merge\n\n${message}\n\n`;

      - name: Job cancelled
        id: job_cancelled
        if: cancelled()
        shell: bash
        run: echo 'JOB_STATUS=cancelled' >> "$GITHUB_ENV"

      - name: Job failed
        id: job_failed
        if: failure()
        shell: bash
        run: echo 'JOB_STATUS=failed' >> "$GITHUB_ENV"

      - name: Merge results
        id: merge_results
        if: always()
        env:
          BICEP_INSTALL: ${{ steps.bicep_install.outputs.result }}
          VALIDATE: ${{ steps.validate.outputs.result }}
          AZURE_PROVIDERS: ${{ steps.azure_providers.outputs.result }}
          DEPLOY: ${{ steps.deploy.outputs.result }}
          AUTO_MERGE: ${{ steps.auto_merge.outputs.result }}
          JOB_STATUS: ${{ env.JOB_STATUS }}
        run: |
          case "${JOB_STATUS}" in
            cancelled) JOB_STATUS=$(echo -e "# Deploy\n\nJob cancelled ❌\n\nJob");;
            failed)    JOB_STATUS=$(echo -e "# Deploy\n\nJob failed ⛔\n\nJob");;
            *)         JOB_STATUS=$(echo -e "# Deploy\n\nJob");;
          esac
          all_results="${BICEP_INSTALL}"
          all_results+="${VALIDATE}"
          all_results+="${AZURE_PROVIDERS}"
          all_results+="${DEPLOY}"
          all_results+="${AUTO_MERGE}"
          repo_url="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}"
          run_url="${repo_url}/actions/runs/${GITHUB_RUN_ID}"
          job="Please see job [#${GITHUB_RUN_NUMBER}](${run_url}) for details!"
          if [ ${#all_results} -gt 64000 ]; then
            result=$(echo -e "${JOB_STATUS} output is too large ❗\n\n${job}")
          elif test -z "${all_results}"; then
            result=$(echo -e "${JOB_STATUS} output is missing ❓\n\n${job}")
          else
            result=$(echo -e "${JOB_STATUS} completed ✅\n\n${all_results}")
          fi
          echo "${result}" >> "$GITHUB_STEP_SUMMARY"
          {
            echo 'result<<c9f1e037a6f46a12'
            echo "${result}"
            echo "c9f1e037a6f46a12"
          } >> "$GITHUB_OUTPUT"

      - name: Comment when done
        id: comment_when_done
        if: >
          always() &&
          github.event_name == 'pull_request_review'
        uses: actions/github-script@v7
        env:
          MERGE_RESULTS: ${{ steps.merge_results.outputs.result }}
          SUBSCRIPTION_ID: ${{ inputs.azure_subscription_id }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const {MERGE_RESULTS} = process.env ?? '';
            const {SUBSCRIPTION_ID} = process.env;
            const HEAD_SHA = process.env.GITHUB_SHA;
            const REPOSITORY = process.env.GITHUB_REPOSITORY;
            const repo_url = `${context.serverUrl}/${REPOSITORY}`;
            const run_url = `${repo_url}/actions/runs/${context.runId}`;
            const prNo = context.issue.number;
            const actor = `@${context.actor}`;
            const repo = {
              owner: context.repo.owner,
              repo: context.repo.repo,
            };
            const body = `${MERGE_RESULTS}

            | Job | Commit | Actor | Subscription |
            | --- | --- | --- | --- |
            | [#${context.runNumber}](${run_url}) | ${HEAD_SHA} | ${actor} | ${SUBSCRIPTION_ID} |`;
            core.info(`Create comment:\n${body}`);
            try {
              const response_cc = await github.rest.issues.createComment({
                ...repo,
                issue_number: prNo,
                body: body,
              });
              if (response_cc.status > 201 || !response_cc.data) {
                const reason = `${prNo}. ${JSON.stringify(response_cc)}`;
                core.setFailed(`Failed to create comment for PR ${reason}`);
              }
            } catch (e) {
              core.setFailed(`Failed to comment when done. ${e}`);
            }

      - name: Dump github context
        id: dump_github_context
        if: >
          failure() || (
            success() &&
            inputs.log_severity != 'ERROR'
          )
        env:
          GH_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "${GH_CONTEXT}"

      - name: Dump steps context
        id: dump_steps_context
        if: >
          failure() || (
            success() &&
            inputs.log_severity != 'ERROR'
          )
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: |
          echo "${STEPS_CONTEXT}"

      - name: Print variables and event
        id: dump_env
        if: >
          failure() || (
            success() &&
            inputs.log_severity != 'ERROR'
          )
        uses: hmarr/debug-action@v2

      - name: Upload artifacts
        id: upload_artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deploy_logs
          path: |
            bicep_install.txt
            validate.txt
            azure_providers.txt
            deploy.txt
          if-no-files-found: ignore
