---
name: "🥾 Bootstrap"
on:
  workflow_call:
    inputs:
      environment:
        description: "The GitHub environment name for the Azure deploy job."
        required: false
        default: "production"
        type: string
      azure_tenant_id:
        description: "The tenant ID in which the subscription exists."
        required: true
        type: string
      azure_client_id:
        description: "The client ID of the service principal for Azure login."
        required: true
        type: string
      azure_subscription_id:
        description: "The subscription ID in which to deploy the resources."
        required: true
        type: string
      location:
        description: "The Azure location to store the deployment metadata."
        required: false
        default: "westeurope"
        type: string
      scope:
        description: "The deployment scope. Accepted: tenant, mg, sub, group."
        required: false
        default: "sub"
        type: string
      management_group:
        description: "Management group to create deployment at for mg scope."
        required: false
        default: ""
        type: string
      resource_group:
        description: "Resource group to create deployment at for group scope."
        required: false
        default: ""
        type: string
      code_template:
        description: "The template address."
        required: false
        default: "main.bicep"
        type: string
      parameters:
        description: "Deployment parameter values."
        required: false
        default: ""
        type: string
      azure_providers:
        description: "Required Azure resource providers."
        required: false
        default: ""
        type: string
      azure_provider_wait_seconds:
        description: "Seconds to wait between each provider status check."
        required: false
        default: "10"
        type: string
      azure_provider_wait_count:
        description: "Times to check provider status before giving up."
        required: false
        default: "30"
        type: string
      ace_version:
        description: "Azure Cost Estimator version."
        required: false
        default: "1.3"
        type: string
      log_severity:
        description: "The log verbosity."
        required: false
        default: "ERROR"
        type: string
    secrets:
      AZURE_CLIENT_SECRET:
        description: "The service principal secret used for Azure login."
        required: false

defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

permissions: read-all

jobs:
  plan:
    name: "🗓️ Plan"
    if: >
      github.event_name == 'pull_request' ||
      github.event_name == 'pull_request_target'
    permissions:
      id-token: write # for azure login with OpenID Connect (OIDC)
      actions: read # for workflow details (upload artifacts needs write)
      contents: read # for checkout
      pull-requests: write # for update issue comment
    runs-on: ubuntu-latest
    steps:
      - name: Add comment
        id: add_comment
        if: >
          github.event_name == 'pull_request' ||
          github.event_name == 'pull_request_target'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const REPOSITORY = process.env.GITHUB_REPOSITORY;
            const HEAD_SHA = process.env.GITHUB_SHA;
            const repo_url = `${context.serverUrl}/${REPOSITORY}`;
            const run_url = `${repo_url}/actions/runs/${context.runId}`;
            const prNo = context.issue.number;
            const actor = `@${context.actor}`;
            const body = `## Job started to validate deployment... ⌛

            | Job | Commit | Actor |
            | --- | --- | --- |
            | [#${context.runNumber}](${run_url}) | ${HEAD_SHA} | ${actor} |`;
            const repo = {
              owner: context.repo.owner,
              repo: context.repo.repo,
            };
            try {
              core.info(`Create a comment with the text:`);
              core.info(body);
              const response_cc = await github.rest.issues.createComment({
                ...repo,
                issue_number: prNo,
                body: body,
              });
              if (response_cc.status > 201 || !response_cc.data) {
                const reason = `${prNo}. ${JSON.stringify(response_cc)}`;
                const message = `Failed to create comment for PR ${reason}`;
                core.setFailed(message);
                return;
              } else {
                comment_id = response_cc.data.id;
              }
              core.setOutput('id', comment_id);
            } catch (e) {
              const message = `Failed to comment at start: ${e}`;
              core.setFailed(message);
            }

      - name: Checkout head ref (src)
        id: checkout_src
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 1

      - name: Bicep lint
        id: bicep_lint
        if: >
          endsWith(inputs.code_template, '.bicep') &&
          !startsWith(inputs.code_template, 'http') &&
          !startsWith(inputs.code_template, '/subscriptions/')
        uses: azure/CLI@v1
        env:
          CODE_TEMPLATE: ${{ inputs.code_template }}
          SEVERITY: ${{ inputs.log_severity }}
        with:
          inlineScript: |
            file="${CODE_TEMPLATE}"
            cmd="az bicep lint --file ${file}"
            case "${SEVERITY}" in
              ERROR)   cmd+=' --only-show-errors';;
              VERBOSE) cmd+=' --verbose';;
              DEBUG)   cmd+=' --debug';;
            esac
            echo "Check that Bicep code adhere to a canonical format"
            echo "Command: ${cmd}"
            az bicep install --only-show-errors >/dev/null 2>&1
            az config set bicep.use_binary_from_path=False --only-show-errors >/dev/null 2>&1
            eval "${cmd}" 1> >(tee -a lint.txt) 2> >(tee -a lint.txt >&2)
            if test -f lint.txt; then
              result=$(cat lint.txt)
              echo "result<<0047393e7aacb9de" >> "$GITHUB_OUTPUT"
              echo "${result}" >> "$GITHUB_OUTPUT"
              echo "0047393e7aacb9de" >> "$GITHUB_OUTPUT"
            fi

      - name: PSRule analysis
        id: ps_rule
        uses: microsoft/ps-rule@latest
        with:
          inputType: repository
          modules: PSRule.Rules.Azure, PSRule.Rules.CAF
          baseline: Azure.Default
          outputFormat: Markdown
          outputPath: ps_rule_results.md

      - name: PSRule analysis report
        id: ps_rule_report
        run: |
          if test -f ps_rule_results.md; then
            result=$(cat ps_rule_results.md)
            echo "result<<eddc1726f9bb37b6" >> "$GITHUB_OUTPUT"
            echo "${result}" >> "$GITHUB_OUTPUT"
            echo "eddc1726f9bb37b6" >> "$GITHUB_OUTPUT"
          fi

      - name: Check Client secret
        id: client_secret
        run: |
          if [ '${{ secrets.AZURE_CLIENT_SECRET }}' = '' ]; then
            echo "exist=false" >> "$GITHUB_OUTPUT"
          else
            echo "exist=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Log in to Azure (Federated)
        id: login_open_id
        if: steps.client_secret.outputs.exist != 'true'
        uses: azure/login@v1
        with:
          client-id: ${{ inputs.azure_client_id }}
          tenant-id: ${{ inputs.azure_tenant_id }}
          subscription-id: ${{ inputs.azure_subscription_id }}

      - name: Log in to Azure (Secret)
        id: login_secret
        if: steps.client_secret.outputs.exist == 'true'
        env:
          CLIENT_ID: ${{ inputs.azure_client_id }}
          TENANT_ID: ${{ inputs.azure_tenant_id }}
        run: |
          set -Eeu
          az login --service-principal -t ${TENANT_ID} -u ${CLIENT_ID} \
            -p '${{ secrets.AZURE_AD_CLIENT_SECRET }}' \
            --only-show-errors

      - name: Deployment what-if
        id: what_if
        uses: azure/CLI@v1
        env:
          SCOPE: ${{ inputs.scope }}
          TEMPLATE: ${{ inputs.code_template }}
          TEMPLATE_PARAMS: ${{ inputs.parameters }}
          MANAGEMENT_GROUP: ${{ inputs.management_group }}
          SUBSCRIPTION_ID: ${{ inputs.azure_subscription_id }}
          RESOURCE_GROUP: ${{ inputs.resource_group }}
          LOCATION: ${{ inputs.location }}
          SEVERITY: ${{ inputs.log_severity }}
        with:
          inlineScript: |
            cmd="az deployment ${SCOPE} what-if --name whatif-${GITHUB_RUN_ID}"
            if [[ $TEMPLATE == http* ]]; then
              cmd+=" --template-uri ${TEMPLATE}"
            elif [[ $TEMPLATE == /subscriptions/* ]]; then
              cmd+=" --template-spec ${TEMPLATE}"
            else
              cmd+=" --template-file ${TEMPLATE}"
            fi
            if test -n "${TEMPLATE_PARAMS}"; then
              cmd+=" --parameters ${TEMPLATE_PARAMS}"
            fi
            if ! [ "${SCOPE}" = 'group' ]; then
              cmd+=" --location ${LOCATION}"
            fi
            if [ "${SCOPE}" = 'mg' ]; then
              cmd+=" --management-group-id ${MANAGEMENT_GROUP}"
            fi
            if [ "${SCOPE}" = 'group' ]; then
              cmd+=" --resource-group ${RESOURCE_GROUP}"
            fi
            case "${SEVERITY}" in
              ERROR)   cmd+=' --only-show-errors';;
              VERBOSE) cmd+=' --verbose';;
              DEBUG)   cmd+=' --debug';;
            esac
            cmd+=" --exclude-change-types Ignore NoChange --no-prompt true"
            echo "Create a deployment plan"
            echo "Command: ${cmd}"
            az account set -s ${SUBSCRIPTION_ID}
            eval "${cmd}" 1> >(tee -a whatif.txt) 2> >(tee -a whatif.txt >&2)
            if test -f whatif.txt; then
              result=$(cat whatif.txt)
              echo "result<<7d9efa072f5be230" >> "$GITHUB_OUTPUT"
              echo "${result}" >> "$GITHUB_OUTPUT"
              echo "7d9efa072f5be230" >> "$GITHUB_OUTPUT"
            fi

      - name: Estimate cost
        id: cost
        if: github.event_name == 'disable for now'
        env:
          SCOPE: ${{ inputs.scope }}
          TEMPLATE: ${{ inputs.code_template }}
          TEMPLATE_PARAMS: ${{ inputs.parameters }}
          MANAGEMENT_GROUP: ${{ inputs.management_group }}
          SUBSCRIPTION_ID: ${{ inputs.azure_subscription_id }}
          RESOURCE_GROUP: ${{ inputs.resource_group }}
          LOCATION: ${{ inputs.location }}
          ACE_VERSION: ${{ inputs.ace_version }}
        run: |
          if test -f ${TEMPLATE}; then
            server='https://github.com'
            org='TheCloudTheory'
            repo='arm-estimator'
            file='linux-x64.zip'
            url="${server}/${org}/${repo}/releases/download/${ACE_VERSION}/${file}"
            curl -o ${file} -sSL $url
            unzip -q ${file}
            chmod +x ./azure-cost-estimator
            cmd="./azure-cost-estimator"
            case "${SCOPE}" in
              tenant) cmd+=" ${SCOPE} ${TEMPLATE} ${LOCATION}";;
              mg)     cmd+=" ${SCOPE} ${TEMPLATE} ${MANAGEMENT_GROUP} ${LOCATION}";;
              sub)    cmd+=" ${SCOPE} ${TEMPLATE} ${SUBSCRIPTION_ID} ${LOCATION}";;
              group)  cmd+=" ${TEMPLATE} ${SUBSCRIPTION_ID} ${RESOURCE_GROUP}";;
            esac
            if test -n "${TEMPLATE_PARAMS}"; then
              cmd+=" --parameters ${TEMPLATE_PARAMS}"
            fi
            cmd+=" --disableDetailedMetrics --generateJsonOutput --jsonOutputFilename cost_output.json"
            echo "Estimate cost"
            echo "Command: ${cmd}"
            eval "${cmd}" 1> >(tee -a cost.txt) 2> >(tee -a cost.txt >&2)
            if test -f cost_output.json; then
              echo "total_cost=$(cat cost_output.json | jq -r '.TotalCost')" >> "$GITHUB_OUTPUT"
              echo "currency=$(cat cost_output.json | jq -r '.Currency')" >> "$GITHUB_OUTPUT"
            fi
            if test -f cost.txt; then
              result=$(cat cost.txt)
              echo "result<<e3599a2c6b8bc912" >> "$GITHUB_OUTPUT"
              echo "${result}" >> "$GITHUB_OUTPUT"
              echo "e3599a2c6b8bc912" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "Unable to estimate cost for template ${TEMPLATE}. A local file is needed."
          fi

      - name: Add summary
        id: summary
        env:
          BICEP_LINT_RESULT: ${{ steps.bicep_lint.outputs.result }}
          PS_RULE_RESULT: ${{ steps.ps_rule_report.outputs.result }}
          WHAT_IF_RESULT: ${{ steps.what_if.outputs.result }}
          COST_RESULT: ${{ steps.cost.outputs.result }}
        run: |
          {
            if test -n "${BICEP_LINT_RESULT}"; then
              echo "## Bicep lint result"
              echo ""
              echo "<details><summary>Click to expand</summary>"
              echo ""
              echo '```json'
              echo "${BICEP_LINT_RESULT}"
              echo '```'
              echo "</details>"
              echo ""
            fi
            if test -n "${PS_RULE_RESULT}"; then
              echo "## PSRule analysis"
              echo ""
              echo "<details><summary>Click to expand</summary>"
              echo "${PS_RULE_RESULT}"
              echo "</details>"
              echo ""
            fi
            if test -n "${WHAT_IF_RESULT}"; then
              echo "## What-If result"
              echo ""
              echo "<details><summary>Click to expand</summary>"
              echo ""
              echo '```diff'
              echo "${WHAT_IF_RESULT}"
              echo '```'
              echo "</details>"
              echo ""
            fi
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Job cancelled
        id: job_cancelled
        if: cancelled()
        shell: bash
        run: echo 'JOB_STATUS=cancelled' >> "$GITHUB_ENV"

      - name: Job failed
        id: job_failed
        if: failure()
        shell: bash
        run: echo 'JOB_STATUS=failed' >> "$GITHUB_ENV"

      - name: Comment when done
        id: comment_when_done
        if: >
          always() &&
          (
            github.event_name == 'pull_request' ||
            github.event_name == 'pull_request_target'
          )
        uses: actions/github-script@v7
        env:
          BICEP_LINT_RESULT: ${{ steps.bicep_lint.outputs.result }}
          PS_RULE_RESULT: ${{ steps.ps_rule_report.outputs.result }}
          WHAT_IF_RESULT: ${{ steps.what_if.outputs.result }}
          COST_RESULT: ${{ steps.cost.outputs.result }}
          EVENT_COMMENT_ID: ${{ steps.add_comment.outputs.id }}
          SUBSCRIPTION_ID: ${{ inputs.azure_subscription_id }}
          PULL_REQUEST_NUMBER: ${{ github.event.pull_request.number }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const {BICEP_LINT_RESULT} = process.env ?? '';
            const {PS_RULE_RESULT} = process.env ?? '';
            const {WHAT_IF_RESULT} = process.env ?? '';
            const {COST_RESULT} = process.env ?? '';
            const {EVENT_COMMENT_ID} = process.env ?? 0;
            const {SUBSCRIPTION_ID} = process.env;
            const {PULL_REQUEST_NUMBER} = process.env;
            const STATUS = process.env.JOB_STATUS ?? 'success';
            const REPOSITORY = process.env.GITHUB_REPOSITORY;
            const HEAD_SHA = process.env.GITHUB_SHA;
            const HEAD_REF = process.env.GITHUB_REF;
            const repo_url = `${context.serverUrl}/${REPOSITORY}`;
            const run_url = `${repo_url}/actions/runs/${context.runId}`;
            const prNo = context.issue.number;
            const actor = `@${context.actor}`;
            const current_time = new Date();
            const repo = {
              owner: context.repo.owner,
              repo: context.repo.repo,
            };
            let body = '', details = '';
            details = `| Job | Commit | Actor | Subscription |
            | --- | --- | --- | --- |
            | [#${context.runNumber}](${run_url}) | ${HEAD_SHA} | ${actor} | ${SUBSCRIPTION_ID} |`;
            if (STATUS == 'failed') {
              body = `### Job failed ⛔`;
            } else if (STATUS == 'cancelled') {
              body = `### Job cancelled 🗙`;
            } else if (!WHAT_IF_RESULT) {
              body = `### What-If analysis

              Unable to find any output from the What-If analysis.`;
            } else {
              body = `## What-If analysis

              <details><summary>Click to expand</summary>
              \`\`\`diff
              ${WHAT_IF_RESULT}
              \`\`\`
              </details>
              `;
              if (BICEP_LINT_RESULT) {
                body = `${body}

                ### Bicep lint result

                <details><summary>Click to expand</summary>
                \`\`\`text
                ${BICEP_LINT_RESULT}
                \`\`\`
                </details>
                `;
              }
              if (PS_RULE_RESULT) {
                body = `${body}

                ### PSRule analysis

                <details><summary>Click to expand</summary>
                \`\`\`text
                ${PS_RULE_RESULT}
                \`\`\`
                </details>
                `;
              }
              if (COST_RESULT) {
                body = `${body}

                ### Cost analysis

                <details><summary>Click to expand</summary>
                \`\`\`text
                ${COST_RESULT}
                \`\`\`
                </details>
                `;
              }
              body = `${body}

              ### Actions

              - Review and approve the plan.
              - Update if needed. Push updates to the [${HEAD_REF}](${repo_url}/tree/${HEAD_REF}) branch.

              The deployment will start when the pull request is approved.`;
            }
            body = `${body}\n\n${details}\n`;
            const comment_id = parseInt(EVENT_COMMENT_ID);
            if (isNaN(comment_id) || comment_id == 0) {
              core.info(`Create a comment with the text:`);
              core.info(body);
              try {
                const response_cc = await github.rest.issues.createComment({
                  ...repo,
                  issue_number: prNo,
                  body: body,
                });
                if (response_cc.status > 201 || !response_cc.data) {
                  const reason = `${prNo}. ${JSON.stringify(response_cc)}`;
                  const message = `Failed to create comment for PR ${reason}`;
                  core.setFailed(message);
                  return;
                }
              } catch (e) {
                const message = `Failed to comment when done: ${e}`;
                core.setFailed(message);
              }
            } else {
              core.info(`Update comment ${comment_id} with the following text:`);
              core.info(body);
              try {
                const response = await github.rest.issues.updateComment({
                  ...repo,
                  comment_id: comment_id,
                  body: body,
                });
                if (response.status != 200 || !response.data) {
                  const reason = `${comment_id}. ${JSON.stringify(response)}`;
                  const message = `Failed to update comment ${reason}`;
                  core.setFailed(message);
                  return;
                }
              } catch (e) {
                const message = `Failed to update comment ${comment_id}: ${e}`;
                core.setFailed(message);
              }
            }

      - name: Dump github context
        id: dump_github_context
        if: >
          failure() || (
            success() &&
            inputs.log_severity != 'ERROR'
          )
        env:
          GH_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "${GH_CONTEXT}"

      - name: Dump steps context
        id: dump_steps_context
        if: >
          failure() || (
            success() &&
            inputs.log_severity != 'ERROR'
          )
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: |
          echo "${STEPS_CONTEXT}"

      - name: Print variables and event
        id: dump_env
        if: >
          failure() || (
            success() &&
            inputs.log_severity != 'ERROR'
          )
        uses: hmarr/debug-action@v2

  deploy:
    name: "🏃 Deploy"
    if: >
      github.event_name == 'workflow_dispatch' ||
      (
        github.event_name == 'pull_request_review' &&
        github.event.review.state == 'APPROVED'
      )
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write # for azure login with OpenID Connect (OIDC)
      actions: read # for workflow details (upload artifacts needs write)
      contents: read # for checkout (needs read) (auto merge need write)
      pull-requests: write # for update issue comment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout head ref (src)
        id: checkout_src
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 1

      - name: Check Client secret
        id: client_secret
        run: |
          if [ '${{ secrets.AZURE_CLIENT_SECRET }}' = '' ]; then
            echo "exist=false" >> "$GITHUB_OUTPUT"
          else
            echo "exist=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Log in to Azure (Federated)
        id: login_open_id
        if: steps.client_secret.outputs.exist != 'true'
        uses: azure/login@v1
        with:
          client-id: ${{ inputs.azure_client_id }}
          tenant-id: ${{ inputs.azure_tenant_id }}
          subscription-id: ${{ inputs.azure_subscription_id }}

      - name: Log in to Azure (Secret)
        id: login_secret
        if: steps.client_secret.outputs.exist == 'true'
        env:
          CLIENT_ID: ${{ inputs.azure_client_id }}
          TENANT_ID: ${{ inputs.azure_tenant_id }}
          SEVERITY: ${{ inputs.log_severity }}
        run: |
          set -Eeu
          case "${SEVERITY}" in
            ERROR)   log_severity=' --only-show-errors';;
            VERBOSE) log_severity=' --verbose';;
            DEBUG)   log_severity=' --debug';;
            *)       log_severity='';;
          esac
          az login --service-principal -t ${TENANT_ID} -u ${CLIENT_ID} \
            -p '${{ secrets.AZURE_AD_CLIENT_SECRET }}' $log_severity

      - name: Deployment validate
        id: validate
        uses: azure/CLI@v1
        env:
          SCOPE: ${{ inputs.scope }}
          TEMPLATE: ${{ inputs.code_template }}
          TEMPLATE_PARAMS: ${{ inputs.parameters }}
          MANAGEMENT_GROUP: ${{ inputs.management_group }}
          SUBSCRIPTION_ID: ${{ inputs.azure_subscription_id }}
          RESOURCE_GROUP: ${{ inputs.resource_group }}
          LOCATION: ${{ inputs.location }}
          SEVERITY: ${{ inputs.log_severity }}
        with:
          inlineScript: |
            cmd="az deployment ${SCOPE} validate --name val-${GITHUB_RUN_ID}"
            if [[ $TEMPLATE == http* ]]; then
              cmd+=" --template-uri ${TEMPLATE}"
            elif [[ $TEMPLATE == /subscriptions/* ]]; then
              cmd+=" --template-spec ${TEMPLATE}"
            else
              cmd+=" --template-file ${TEMPLATE}"
            fi
            if test -n "${TEMPLATE_PARAMS}"; then
              cmd+=" --parameters ${TEMPLATE_PARAMS}"
            fi
            if ! [ "${SCOPE}" = 'group' ]; then
              cmd+=" --location ${LOCATION}"
            fi
            if [ "${SCOPE}" = 'mg' ]; then
              cmd+=" --management-group-id ${MANAGEMENT_GROUP}"
            fi
            if [ "${SCOPE}" = 'group' ]; then
              cmd+=" --resource-group ${RESOURCE_GROUP}"
            fi
            case "${SEVERITY}" in
              ERROR)   cmd+=' --only-show-errors';;
              VERBOSE) cmd+=' --verbose';;
              DEBUG)   cmd+=' --debug';;
            esac
            cmd+=" --no-prompt true -o json"
            echo "Validate template"
            echo "Command: ${cmd}"
            az account set -s ${SUBSCRIPTION_ID}
            eval "${cmd}" 1> >(tee -a validate.txt) 2> >(tee -a validate.txt >&2)
            if test -f validate.txt; then
              result=$(cat validate.txt)
              echo "result<<91ded7e8204bca18" >> "$GITHUB_OUTPUT"
              echo "${result}" >> "$GITHUB_OUTPUT"
              echo "91ded7e8204bca18" >> "$GITHUB_OUTPUT"
              if [[ "${result}" == {* ]]; then
                providers=$(
                  echo "${result}" | \
                    jq '.properties.providers | map(.namespace) | join(" ")'
                )
                echo "providers=${providers}" >> "$GITHUB_OUTPUT"
              fi
            fi

      - name: Check Azure providers
        id: azure_providers
        env:
          LST1: ${{ inputs.azure_providers }}
          LST2: ${{ steps.validate.outputs.providers }}
          WAIT_SECONDS: ${{ inputs.azure_provider_wait_seconds }}
          WAIT_COUNT: ${{ inputs.azure_provider_wait_count }}
          SUBSCRIPTION_ID: ${{ inputs.azure_subscription_id }}
          SEVERITY: ${{ inputs.log_severity }}
        run: |
          providers=($(echo "${LST1} ${LST2}" | xargs | tr ' ' '\n' | sort -u))
          declare -a registeringProviders=()
          case "${SEVERITY}" in
            ERROR)   log_severity=' --only-show-errors';;
            VERBOSE) log_severity=' --verbose';;
            DEBUG)   log_severity=' --debug';;
            *)       log_severity='';;
          esac
          az account set -s ${SUBSCRIPTION_ID}
          registered=($(
            az provider list \
              --query "[?registrationState=='Registered'].namespace" \
              -o tsv $log_severity
          ))
          registered=$(echo " ${registered[*]} " | tr '[:upper:]' '[:lower:]')
          for provider in "${providers[@]}"; do
            value=$(echo " ${provider} " | tr '[:upper:]' '[:lower:]')
            if [[ ! " ${registered[*]} " =~ ${value} ]]; then
              echo "Register ${provider}"
              az provider register --consent-to-permissions \
                --namespace $provider ${log_severity}
              registeringProviders+=($provider)
            fi
          done
          for provider in "${registeringProviders[@]}"; do
            registrationState='Registering'
            timesTried=0
            while [ "${registrationState}" != 'Registered' ] || \
                  [ $timesTried -gt $WAIT_COUNT ]
            do
              echo "Waiting for ${provider} to register..."
              registrationState=$(
                az provider show --namespace $provider \
                  --query "registrationState" -o tsv $log_severity
              )
              ((timesTried++))
              sleep $WAIT_SECONDS
            done
          done

      - name: Deployment
        id: deploy
        uses: azure/CLI@v1
        env:
          SCOPE: ${{ inputs.scope }}
          TEMPLATE: ${{ inputs.code_template }}
          TEMPLATE_PARAMS: ${{ inputs.parameters }}
          MANAGEMENT_GROUP: ${{ inputs.management_group }}
          SUBSCRIPTION_ID: ${{ inputs.azure_subscription_id }}
          RESOURCE_GROUP: ${{ inputs.resource_group }}
          LOCATION: ${{ inputs.location }}
          SEVERITY: ${{ inputs.log_severity }}
        with:
          inlineScript: |
            cmd="az deployment ${SCOPE} create --name deploy-${GITHUB_RUN_ID}"
            if [[ $TEMPLATE == http* ]]; then
              cmd+=" --template-uri ${TEMPLATE}"
            elif [[ $TEMPLATE == /subscriptions/* ]]; then
              cmd+=" --template-spec ${TEMPLATE}"
            else
              cmd+=" --template-file ${TEMPLATE}"
            fi
            if test -n "${TEMPLATE_PARAMS}"; then
              cmd+=" --parameters ${TEMPLATE_PARAMS}"
            fi
            if ! [ "${SCOPE}" = 'group' ]; then
              cmd+=" --location ${LOCATION}"
            fi
            if [ "${SCOPE}" = 'mg' ]; then
              cmd+=" --management-group-id ${MANAGEMENT_GROUP}"
            fi
            if [ "${SCOPE}" = 'group' ]; then
              cmd+=" --resource-group ${RESOURCE_GROUP}"
            fi
            case "${SEVERITY}" in
              ERROR)   cmd+=' --only-show-errors';;
              VERBOSE) cmd+=' --verbose';;
              DEBUG)   cmd+=' --debug';;
            esac
            cmd+=" --no-prompt true"
            echo "Deploy template"
            echo "Command: ${cmd}"
            az account set -s ${SUBSCRIPTION_ID}
            result=$(eval "${cmd}")
            echo "result<<f4b6bcbb24d55a01" >> "$GITHUB_OUTPUT"
            echo "${result}" >> "$GITHUB_OUTPUT"
            echo "f4b6bcbb24d55a01" >> "$GITHUB_OUTPUT"

      - name: Add summary
        id: summary
        env:
          DEPLOY_RESULT: ${{ steps.deploy.outputs.result }}
        run: |
          {
            echo "## Deployment"
            echo ""
            echo "<details><summary>Click to expand the result</summary>"
            echo ""
            echo '```json'
            echo "${DEPLOY_RESULT}"
            echo '```'
            echo "</details>"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Job cancelled
        id: job_cancelled
        if: cancelled()
        shell: bash
        run: echo 'JOB_STATUS=cancelled' >> "$GITHUB_ENV"

      - name: Job failed
        id: job_failed
        if: failure()
        shell: bash
        run: echo 'JOB_STATUS=failed' >> "$GITHUB_ENV"

      - name: Comment when done
        id: comment_when_done
        if: >
          always() &&
          github.event_name == 'pull_request_review'
        uses: actions/github-script@v7
        env:
          DEPLOY_RESULT: ${{ steps.deploy.outputs.result }}
          SUBSCRIPTION_ID: ${{ inputs.azure_subscription_id }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const {DEPLOY_RESULT} = process.env ?? '';
            const {SUBSCRIPTION_ID} = process.env;
            const STATUS = process.env.JOB_STATUS ?? 'success';
            const REPOSITORY = process.env.GITHUB_REPOSITORY;
            const HEAD_SHA = process.env.GITHUB_SHA;
            const repo_url = `${context.serverUrl}/${REPOSITORY}`;
            const run_url = `${repo_url}/actions/runs/${context.runId}`;
            const prNo = context.issue.number;
            const actor = `@${context.actor}`;
            const current_time = new Date();
            const repo = {
              owner: context.repo.owner,
              repo: context.repo.repo,
            };
            let body = '', details = '';
            details = `| Job | Commit | Actor | Subscription |
            | --- | --- | --- | --- |
            | [#${context.runNumber}](${run_url}) | ${HEAD_SHA} | ${actor} | ${SUBSCRIPTION_ID} |`;
            if (STATUS == 'failed') {
              body = `### Job failed ⛔`;
            } else if (STATUS == 'cancelled') {
              body = `### Job cancelled 🗙`;
            } else if (!DEPLOY_RESULT) {
              body = `### Deployment result not found ⦸`;
            } else {
              body = `## Deployment completed ✅`;
              body = `${body}\n\n<details><summary>Click for details</summary>\n\n\`\`\`json\n${DEPLOY_RESULT}\n\`\`\`\n\n</details>`;
            }
            body = `${body}\n\n${details}\n`;
            core.info(`Create a comment with the text:`);
            core.info(body);
            try {
              const response_cc = await github.rest.issues.createComment({
                ...repo,
                issue_number: prNo,
                body: body,
              });
              if (response_cc.status > 201 || !response_cc.data) {
                const reason = `${prNo}. ${JSON.stringify(response_cc)}`;
                const message = `Failed to create comment for PR ${reason}`;
                core.setFailed(message);
                return;
              }
            } catch (e) {
              const message = `Failed to comment when done: ${e}`;
              core.setFailed(message);
            }

      - name: Dump github context
        id: dump_github_context
        if: >
          failure() || (
            success() &&
            inputs.log_severity != 'ERROR'
          )
        env:
          GH_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "${GH_CONTEXT}"

      - name: Dump steps context
        id: dump_steps_context
        if: >
          failure() || (
            success() &&
            inputs.log_severity != 'ERROR'
          )
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: |
          echo "${STEPS_CONTEXT}"

      - name: Print variables and event
        id: dump_env
        if: >
          failure() || (
            success() &&
            inputs.log_severity != 'ERROR'
          )
        uses: hmarr/debug-action@v2
