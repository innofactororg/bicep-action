---
name: "🥾 Bootstrap"
on:
  workflow_call:
    inputs:
      environment:
        description: "The GitHub environment name for the Azure deploy job."
        required: false
        default: "production"
        type: string
      azure_tenant_id:
        description: "The tenant ID in which the subscription exists."
        required: true
        type: string
      azure_client_id:
        description: "The client ID of the service principal for Azure login."
        required: true
        type: string
      azure_subscription_id:
        description: "The subscription ID in which to deploy the resources."
        required: true
        type: string
      location:
        description: "The Azure location to store the deployment metadata."
        required: false
        default: "westeurope"
        type: string
      scope:
        description: "The deployment scope. Accepted: tenant, mg, sub, group."
        required: false
        default: "sub"
        type: string
      management_group:
        description: "Management group to create deployment at for mg scope."
        required: false
        default: ""
        type: string
      resource_group:
        description: "Resource group to create deployment at for group scope."
        required: false
        default: ""
        type: string
      code_template:
        description: "The template address."
        required: false
        default: "main.bicep"
        type: string
      parameters:
        description: "Deployment parameter values."
        required: false
        default: ""
        type: string
      date_time_language_format:
        description: "The format to use for date and time in comments."
        required: false
        default: "sv-SE"
        type: string
      time_zone:
        description: "The time zone to use for time in comments."
        required: false
        default: "Europe/Oslo"
        type: string
      log_severity:
        description: "The log verbosity."
        required: false
        default: "ERROR"
        type: string

defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

permissions: read-all

jobs:
  plan:
    name: "🗓️ Plan"
    if: >
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'pull_request' ||
      github.event_name == 'pull_request_target'
    permissions:
      id-token: write # for azure login with OpenID Connect (OIDC)
      actions: read # for workflow details (upload artifacts needs write)
      contents: read # for checkout
      pull-requests: write # for update issue comment
    runs-on: ubuntu-latest
    steps:
      - name: Add comment
        id: comment
        if: >
          github.event_name == 'pull_request' ||
          github.event_name == 'pull_request_target'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let body = '';
            const REPOSITORY = process.env.GITHUB_REPOSITORY;
            const HEAD_SHA = process.env.GITHUB_SHA;
            const repo_url = `${context.serverUrl}/${REPOSITORY}`;
            const run_url = `${repo_url}/actions/runs/${context.runId}`;
            const event = context.event.number;
            const actor = `@${context.actor}`;
            const details = `| Job | Commit | Actor |
            | --- | --- | --- | --- | --- | --- | --- |
            | [#${context.runNumber}](${run_url}) | ${HEAD_SHA} | ${actor} |`;
            body = `## Job started to validate deployment... ⌛\n\n${details}`;
            const repo = {
              owner: context.repo.owner,
              repo: context.repo.repo,
            };
            try {
              core.info(`Create a comment with the text:`);
              core.info(body);
              const response_cc = await github.rest.issues.createComment({
                ...repo,
                issue_number: event,
                body: body,
              });
              if (response_cc.status > 201 || !response_cc.data) {
                const reason = `${event}. ${JSON.stringify(response_cc)}`;
                const message = `Failed to create comment for PR ${reason}`;
                core.setFailed(message);
                return;
              } else {
                comment_id = response_cc.data.id;
              }
              core.setOutput('id', comment_id);
            } catch (e) {
              const message = `Failed to comment at start: ${e}`;
              core.setFailed(message);
            }

      - name: Checkout head ref (src)
        id: checkout_src
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 1

      - name: Bicep build
        id: bicep_build
        uses: azure/CLI@v1
        env:
          CODE_TEMPLATE: ${{ inputs.code_template }}
          SEVERITY: ${{ inputs.log_severity }}
        with:
          inlineScript: |
            file="${CODE_TEMPLATE}"
            if [[ $file != *.bicep ]]; then
              echo "Skip! Not a Bicep code file: ${code_template}"
            elif [[ $file == http* || $file == /subscriptions/* ]]; then
              echo "Skip! Not a local file: ${code_template}"
            else
              log_param=''
              if [ "${SEVERITY}" = 'ERROR' ]; then
                log_param='--only-show-errors'
              elif [ "${SEVERITY}" = 'VERBOSE' ]; then
                log_param='--verbose'
              elif [ "${SEVERITY}" = 'DEBUG' ]; then
                log_param='--debug'
              fi
              echo "Check that Bicep file(s) adhere to a canonical format"
              az bicep lint --file "${file}" ${log_param}
            fi

      - name: Log in to Azure
        id: login
        uses: azure/login@v1
        with:
          client-id: ${{ inputs.azure_client_id }}
          tenant-id: ${{ inputs.azure_tenant_id }}
          subscription-id: ${{ inputs.azure_subscription_id }}

      - name: Deployment validate
        id: validate
        uses: azure/CLI@v1
        env:
          CODE_TEMPLATE: ${{ inputs.code_template }}
          SCOPE: ${{ inputs.scope }}
          INPUT_PARAMETERS: ${{ inputs.parameters }}
          MANAGEMENT_GROUP: ${{ inputs.management_group }}
          SUBSCRIPTION_ID: ${{ inputs.azure_subscription_id }}
          RESOURCE_GROUP: ${{ inputs.resource_group }}
          LOCATION: ${{ inputs.location }}
          SEVERITY: ${{ inputs.log_severity }}
        with:
          inlineScript: |
            echo "Validate template at ${SCOPE} scope"
            template="${CODE_TEMPLATE}"
            parameters=''
            template_type='template-file'
            if [[ $template == http* ]]; then
              template_type='template-uri'
            elif [[ $template == /subscriptions/* ]]; then
              template_type='template-spec'
            fi
            if [ -n "${INPUT_PARAMETERS}" ]; then
              parameters="--parameters ${INPUT_PARAMETERS}"
            fi
            log_param=''
            if [ "${SEVERITY}" = 'ERROR' ]; then
              log_param='--only-show-errors'
            elif [ "${SEVERITY}" = 'VERBOSE' ]; then
              log_param='--verbose'
            elif [ "${SEVERITY}" = 'DEBUG' ]; then
              log_param='--debug'
            fi
            az account set -s ${SUBSCRIPTION_ID} ${log_param}
            if [ "${SCOPE}" = 'tenant' ]; then
              az deployment tenant validate \
                --location ${LOCATION} \
                --name validate-${GITHUB_RUN_ID} \
                --no-prompt true \
                --output table \
                --${template_type} "${template}" ${parameters} ${log_param}
            elif [ "${SCOPE}" = 'mg' ]; then
              az deployment mg validate \
                --management-group-id ${MANAGEMENT_GROUP} \
                --location ${LOCATION} \
                --name validate-${GITHUB_RUN_ID} \
                --no-prompt true \
                --output table \
                --${template_type} "${template}" ${parameters} ${log_param}
            elif [ "${SCOPE}" = 'sub' ]; then
              az deployment sub validate \
                --location ${LOCATION} \
                --name validate-${GITHUB_RUN_ID} \
                --no-prompt true \
                --output table \
                --${template_type} "${template}" ${parameters} ${log_param}
            elif [ "${SCOPE}" = 'group' ]; then
              az deployment group validate \
                --resource-group ${RESOURCE_GROUP} \
                --name validate-${GITHUB_RUN_ID} \
                --no-prompt true \
                --output table \
                --${template_type} "${template}" ${parameters} ${log_param}
            else
              msg="Invalid scope: ${SCOPE}. Accepted: tenant, mg, sub, group."
              echo "::error file=${GITHUB_ACTION}::${msg}"
              exit 1
            fi

      - name: Deployment what-if
        id: what_if
        uses: azure/CLI@v1
        env:
          CODE_TEMPLATE: ${{ inputs.code_template }}
          SCOPE: ${{ inputs.scope }}
          INPUT_PARAMETERS: ${{ inputs.parameters }}
          MANAGEMENT_GROUP: ${{ inputs.management_group }}
          SUBSCRIPTION_ID: ${{ inputs.azure_subscription_id }}
          RESOURCE_GROUP: ${{ inputs.resource_group }}
          LOCATION: ${{ inputs.location }}
          SEVERITY: ${{ inputs.log_severity }}
        with:
          inlineScript: |
            echo "Create a plan for deployment at ${SCOPE} scope"
            template="${CODE_TEMPLATE}"
            deploy_name="what-if-${GITHUB_RUN_ID}"
            parameters=''
            result=''
            template_type='template-file'
            if [[ $template == http* ]]; then
              template_type='template-uri'
            elif [[ $template == /subscriptions/* ]]; then
              template_type='template-spec'
            fi
            if [ -n "${INPUT_PARAMETERS}" ]; then
              parameters="--parameters ${INPUT_PARAMETERS}"
            fi
            log_param=''
            if [ "${SEVERITY}" = 'ERROR' ]; then
              log_param='--only-show-errors'
            elif [ "${SEVERITY}" = 'VERBOSE' ]; then
              log_param='--verbose'
            elif [ "${SEVERITY}" = 'DEBUG' ]; then
              log_param='--debug'
            fi
            az account set -s ${SUBSCRIPTION_ID} ${log_param}
            if [ "${SCOPE}" = 'tenant' ]; then
              result=$(
                az deployment tenant what-if \
                  --location ${LOCATION} \
                  --name ${deploy_name} \
                  --no-pretty-print \
                  --no-prompt true \
                  --exclude-change-types Ignore NoChange \
                  --${template_type} "${template}" ${parameters} ${log_param}
              )
            elif [ "${SCOPE}" = 'mg' ]; then
              result=$(
                az deployment mg what-if \
                  --management-group-id ${MANAGEMENT_GROUP} \
                  --location ${LOCATION} \
                  --name ${deploy_name} \
                  --no-pretty-print \
                  --no-prompt true \
                  --exclude-change-types Ignore NoChange \
                  --${template_type} "${template}" ${parameters} ${log_param}
              )
            elif [ "${SCOPE}" = 'sub' ]; then
              result=$(
                az deployment sub what-if \
                  --location ${LOCATION} \
                  --name ${deploy_name} \
                  --no-pretty-print \
                  --no-prompt true \
                  --exclude-change-types Ignore NoChange \
                  --${template_type} "${template}" ${parameters} ${log_param}
              )
            elif [ "${SCOPE}" = 'group' ]; then
              result=$(
                az deployment group what-if \
                  --resource-group ${RESOURCE_GROUP} \
                  --name ${deploy_name} \
                  --no-pretty-print \
                  --no-prompt true \
                  --exclude-change-types Ignore NoChange \
                  --${template_type} "${template}" ${parameters} ${log_param}
              )
            else
              msg="Invalid scope: ${SCOPE}. Accepted: tenant, mg, sub, group."
              echo "::error file=${GITHUB_ACTION}::${msg}"
              exit 1
            fi
            echo "result=${result}" >> "$GITHUB_OUTPUT"

      - name: Install cost estimator
        id: install_estimator
        run: |
          server='https://github.com'
          org='TheCloudTheory'
          repo='arm-estimator'
          ver='1.3'
          file='linux-x64.zip'
          url="${server}/${org}/${repo}/releases/download/${ver}/${file}"
          curl -o ${file} -sSL $url
          unzip -q ${file}
          chmod +x ./azure-cost-estimator

      - name: Estimate cost
        id: cost
        uses: azure/CLI@v1
        env:
          CODE_TEMPLATE: ${{ inputs.code_template }}
          SCOPE: ${{ inputs.scope }}
          INPUT_PARAMETERS: ${{ inputs.parameters }}
          MANAGEMENT_GROUP: ${{ inputs.management_group }}
          SUBSCRIPTION_ID: ${{ inputs.azure_subscription_id }}
          RESOURCE_GROUP: ${{ inputs.resource_group }}
          LOCATION: ${{ inputs.location }}
        with:
          inlineScript: |
            echo "Estimate cost for deployment at ${SCOPE} scope"
            template="${CODE_TEMPLATE}"
            parameters=''
            result=''
            template_type='template-file'
            if [[ $template == http* ]]; then
              template_type='template-uri'
            elif [[ $template == /subscriptions/* ]]; then
              template_type='template-spec'
            fi
            if [ -n "${INPUT_PARAMETERS}" ] && \
               [ "${template_type}" = 'template-file' ]; then
              parameters="--parameters ${INPUT_PARAMETERS}"'
            fi
            if [ "${SCOPE}" = 'tenant' ]; then
              result=$(
                azure-cost-estimator tenant "${template}" \
                  ${LOCATION} --disableDetailedMetrics ${parameters}
              )
            elif [ "${SCOPE}" = 'mg' ]; then
              result=$(
                azure-cost-estimator mg "${template}" \
                  ${MANAGEMENT_GROUP} \
                  ${LOCATION} --disableDetailedMetrics ${parameters}
              )
            elif [ "${SCOPE}" = 'sub' ]; then
              result=$(
                azure-cost-estimator sub "${template}" \
                  ${SUBSCRIPTION_ID} \
                  ${LOCATION} --disableDetailedMetrics ${parameters}
              )
            elif [ "${SCOPE}" = 'group' ]; then
              result=$(
                azure-cost-estimator "${template}" \
                  ${SUBSCRIPTION_ID} ${RESOURCE_GROUP} \
                  --disableDetailedMetrics ${parameters}
              )
            else
              msg="Invalid scope: ${SCOPE}. Accepted: tenant, mg, sub, group."
              echo "::error file=${GITHUB_ACTION}::${msg}"
              exit 1
            fi
            echo "result=${result}" >> "$GITHUB_OUTPUT"

      - name: Add summary
        id: summary
        env:
          WHAT_IF_RESULT: ${{ steps.what_if.outputs.result }}
          COST_RESULT: ${{ steps.cost.outputs.result }}
        run: |
          {
            echo "## Change Plan"
            echo ""
            echo "<details><summary>Click to expand the change plan</summary>"
            echo ""
            echo '```json'
            echo "${WHAT_IF_RESULT}"
            echo '```'
            echo "</details>"
            echo ""
            echo "## Estimated Cost"
            echo ""
            echo '```text'
            echo "${COST_RESULT}"
            echo '```'
            echo "</details>"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Job cancelled
        id: job_cancelled
        if: cancelled()
        shell: bash
        run: echo 'JOB_STATUS=cancelled' >> "$GITHUB_ENV"

      - name: Job failed
        id: job_failed
        if: failure()
        shell: bash
        run: echo 'JOB_STATUS=failed' >> "$GITHUB_ENV"

      - name: Comment when done
        id: comment_when_done
        if: >
          always() &&
          (
            github.event_name == 'pull_request' ||
            github.event_name == 'pull_request_target'
          )
        uses: actions/github-script@v7
        env:
          WHAT_IF_RESULT: ${{ steps.what_if.outputs.result }}
          COST_RESULT: ${{ steps.cost.outputs.result }}
          EVENT_COMMENT_ID: ${{ steps.comment.outputs.id }}
          LANG_FORMAT: ${{ inputs.date_time_language_format }}
          TIME_ZONE: ${{ inputs.time_zone }}
          SUBSCRIPTION_ID: ${{ inputs.azure_subscription_id }}
          PULL_REQUEST_NUMBER: ${{ github.event.pull_request.number }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const {WHAT_IF_RESULT} = process.env ?? '';
            const {COST_RESULT} = process.env ?? '';
            const {EVENT_COMMENT_ID} = process.env ?? 0;
            const {LANG_FORMAT} = process.env;
            const {TIME_ZONE} = process.env;
            const {SUBSCRIPTION_ID} = process.env;
            const {PULL_REQUEST_NUMBER} = process.env;
            const REPOSITORY = process.env.GITHUB_REPOSITORY;
            const HEAD_SHA = process.env.GITHUB_SHA;
            const HEAD_REF = process.env.GITHUB_REF;
            const STATUS = process.env.JOB_STATUS ?? 'success';
            const repo_url = `${context.serverUrl}/${REPOSITORY}`;
            const run_url = `${repo_url}/actions/runs/${context.runId}`;
            const event = context.event.number;
            const actor = `@${context.actor}`;
            const current_time = new Date();
            const repo = {
              owner: context.repo.owner,
              repo: context.repo.repo,
            };
            let body = '', details = '';
            let comment_id = 0;
            let run_date = current_time.toLocaleDateString(LANG_FORMAT, {timeZone: TIME_ZONE});
            let run_time = current_time.toLocaleTimeString(LANG_FORMAT, {timeZone: TIME_ZONE});
            details = `| Job | Commit | Actor | Subscription |
            | --- | --- | --- | --- | --- | --- | --- |
            | [#${context.runNumber}](${run_url}) | ${HEAD_SHA} | ${actor} | ${SUBSCRIPTION_ID} |`;
            if (STATUS == 'failed') {
              body = `## Job failed ⛔\n\n${details}`;
            } else if (STATUS == 'cancelled') {
              body = `## Job cancelled 🗙\n\n${details}`;
            } else {
              body = `## Deployment plan 🗓️\n\n${details}`;
            }
            if (!WHAT_IF_RESULT) {
              body = `${body}\n\n### Plan output not found ⦸`;
            } else {
              body = `${body}\n\nThis plan was generated at ${run_date} ${run_time}.`;
              body = `${body}\n\n<details><summary>Show plan</summary>\n\n\`\`\`json\n${WHAT_IF_RESULT}\n\`\`\`\n\n</details>`;
              body = `${body}\n\n### Cost analysis\n\n\`\`\`text\n${COST_RESULT}\n\`\`\`\n\n`;
              body = `${body}\n\n### Actions`;
              body = `${body}\n\nReview the plan. Updates should be pushed to the [${HEAD_REF}](${repo_url}/tree/${HEAD_REF}) branch.`;
              body = `${body}\n\The deployment will start when the pull request is approved.`;
            }
            comment_id = isNaN("${EVENT_COMMENT_ID}") ? 0 : +"${EVENT_COMMENT_ID}";
            if (comment_id != 0) {
              core.info(`Update comment ${comment_id} with the following text:`);
              core.info(body);
              try {
                const response = await github.rest.issues.updateComment({
                  ...repo,
                  comment_id: comment_id,
                  body: body,
                });
                if (response.status != 200 || !response.data) {
                  const reason = `${comment_id}. ${JSON.stringify(response)}`;
                  const message = `Failed to update comment ${reason}`;
                  core.setFailed(message);
                  return;
                }
              } catch (e) {
                const message = `Failed to update comment ${comment_id}: ${e}`;
                core.setFailed(message);
              }
            } else {
              core.info(`Create a comment with the text:`);
              core.info(body);
              try {
                const response_cc = await github.rest.issues.createComment({
                  ...repo,
                  issue_number: event,
                  body: body,
                });
                if (response_cc.status > 201 || !response_cc.data) {
                  const reason = `${event}. ${JSON.stringify(response_cc)}`;
                  const message = `Failed to create comment for PR ${reason}`;
                  core.setFailed(message);
                  return;
                }
              } catch (e) {
                const message = `Failed to comment when done: ${e}`;
                core.setFailed(message);
              }
            }

      - name: Dump github context
        id: dump_github_context
        if: >
          failure() || (
            success() &&
            inputs.log_severity != 'ERROR'
          )
        env:
          GH_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "${GH_CONTEXT}"

      - name: Dump steps context
        id: dump_steps_context
        if: >
          failure() || (
            success() &&
            inputs.log_severity != 'ERROR'
          )
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: |
          echo "${STEPS_CONTEXT}"

      - name: Print variables and event
        id: dump_env
        if: >
          failure() || (
            success() &&
            inputs.log_severity != 'ERROR'
          )
        uses: hmarr/debug-action@v2

  deploy:
    name: "🏃 Deploy"
    if: >
      github.event_name == 'workflow_dispatch' ||
      (
        github.event_name == 'pull_request_review' &&
        github.event.review.state == 'APPROVED'
      )
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write # for azure login with OpenID Connect (OIDC)
      actions: read # for workflow details (upload artifacts needs write)
      contents: read # for checkout (needs read) (auto merge need write)
      pull-requests: write # for update issue comment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout head ref (src)
        id: checkout_src
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 1

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ inputs.azure_client_id }}
          tenant-id: ${{ inputs.azure_tenant_id }}
          subscription-id: ${{ inputs.azure_subscription_id }}

      - name: Deployment
        id: deploy
        uses: azure/CLI@v1
        env:
          CODE_TEMPLATE: ${{ inputs.code_template }}
          SCOPE: ${{ inputs.scope }}
          INPUT_PARAMETERS: ${{ inputs.parameters }}
          MANAGEMENT_GROUP: ${{ inputs.management_group }}
          SUBSCRIPTION_ID: ${{ inputs.azure_subscription_id }}
          RESOURCE_GROUP: ${{ inputs.resource_group }}
          LOCATION: ${{ inputs.location }}
          SEVERITY: ${{ inputs.log_severity }}
        with:
          inlineScript: |
            echo "Deploy at ${SCOPE} scope"
            template="${CODE_TEMPLATE}"
            deploy_name="deployment-${GITHUB_RUN_ID}"
            parameters=''
            result=''
            template_type='template-file'
            if [[ $template == http* ]]; then
              template_type='template-uri'
            elif [[ $template == /subscriptions/* ]]; then
              template_type='template-spec'
            fi
            if [ -n "${INPUT_PARAMETERS}" ]; then
              parameters="--parameters ${INPUT_PARAMETERS}"
            fi
            log_param=''
            if [ "${SEVERITY}" = 'ERROR' ]; then
              log_param='--only-show-errors'
            elif [ "${SEVERITY}" = 'VERBOSE' ]; then
              log_param='--verbose'
            elif [ "${SEVERITY}" = 'DEBUG' ]; then
              log_param='--debug'
            fi
            az account set -s ${SUBSCRIPTION_ID} ${log_param}
            if [ "${SCOPE}" = 'tenant' ]; then
              result=$(
                az deployment tenant create \
                  --location ${LOCATION} \
                  --name ${deploy_name} \
                  --no-prompt true \
                  --${template_type} "${template}" ${parameters} ${log_param}
              )
            elif [ "${SCOPE}" = 'mg' ]; then
              result=$(
                az deployment mg create \
                  --management-group-id ${MANAGEMENT_GROUP} \
                  --location ${LOCATION} \
                  --name ${deploy_name} \
                  --no-prompt true \
                  --${template_type} "${template}" ${parameters} ${log_param}
              )
            elif [ "${SCOPE}" = 'sub' ]; then
              result=$(
                az deployment sub create \
                  --location ${LOCATION} \
                  --name ${deploy_name} \
                  --no-prompt true \
                  --${template_type} "${template}" ${parameters} ${log_param}
              )
            elif [ "${SCOPE}" = 'group' ]; then
              result=$(
                az deployment group create \
                  --resource-group ${RESOURCE_GROUP} \
                  --name ${deploy_name} \
                  --no-prompt true \
                  --${template_type} "${template}" ${parameters} ${log_param}
              )
            else
              msg="Invalid scope: ${SCOPE}. Accepted: tenant, mg, sub, group."
              echo "::error file=${GITHUB_ACTION}::${msg}"
              exit 1
            fi
            echo "result=${result}" >> "$GITHUB_OUTPUT"

      - name: Add summary
        id: summary
        env:
          DEPLOY_RESULT: ${{ steps.deploy.outputs.result }}
        run: |
          {
            echo "## Deployment"
            echo ""
            echo "<details><summary>Click to expand the result</summary>"
            echo ""
            echo '```json'
            echo "${DEPLOY_RESULT}"
            echo '```'
            echo "</details>"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Job cancelled
        id: job_cancelled
        if: cancelled()
        shell: bash
        run: echo 'JOB_STATUS=cancelled' >> "$GITHUB_ENV"

      - name: Job failed
        id: job_failed
        if: failure()
        shell: bash
        run: echo 'JOB_STATUS=failed' >> "$GITHUB_ENV"

      - name: Comment when done
        id: comment_when_done
        if: >
          always() &&
          github.event_name == 'pull_request_review'
        uses: actions/github-script@v7
        env:
          DEPLOY_RESULT: ${{ steps.deploy.outputs.result }}
          LANG_FORMAT: ${{ inputs.date_time_language_format }}
          TIME_ZONE: ${{ inputs.time_zone }}
          SUBSCRIPTION_ID: ${{ inputs.azure_subscription_id }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const {DEPLOY_RESULT} = process.env ?? '';
            const {LANG_FORMAT} = process.env;
            const {TIME_ZONE} = process.env;
            const {SUBSCRIPTION_ID} = process.env;
            const REPOSITORY = process.env.GITHUB_REPOSITORY;
            const HEAD_SHA = process.env.GITHUB_SHA;
            const STATUS = process.env.JOB_STATUS ?? 'success';
            const repo_url = `${context.serverUrl}/${REPOSITORY}`;
            const run_url = `${repo_url}/actions/runs/${context.runId}`;
            const event = context.event.number;
            const actor = `@${context.actor}`;
            const current_time = new Date();
            const repo = {
              owner: context.repo.owner,
              repo: context.repo.repo,
            };
            let body = '', details = '';
            let run_date = current_time.toLocaleDateString(LANG_FORMAT, {timeZone: TIME_ZONE});
            let run_time = current_time.toLocaleTimeString(LANG_FORMAT, {timeZone: TIME_ZONE});
            details = `| Job | Commit | Actor | Subscription |
            | --- | --- | --- | --- | --- | --- | --- |
            | [#${context.runNumber}](${run_url}) | ${HEAD_SHA} | ${actor} | ${SUBSCRIPTION_ID} |`;
            if (STATUS == 'failed') {
              body = `## Job failed ⛔\n\n${details}`;
            } else if (STATUS == 'cancelled') {
              body = `## Job cancelled 🗙\n\n${details}`;
            } else {
              body = `## Deployment completed ✅\n\n${details}`;
            }
            if (!DEPLOY_RESULT) {
              body = `${body}\n\n### Deployment result not found ⦸`;
            } else {
              body = `${body}\n\nThis job finished at ${run_date} ${run_time}.`;
              body = `${body}\n\n<details><summary>Show deployment result</summary>\n\n\`\`\`json\n${DEPLOY_RESULT}\n\`\`\`\n\n</details>`;
            }
            core.info(`Create a comment with the text:`);
            core.info(body);
            try {
              const response_cc = await github.rest.issues.createComment({
                ...repo,
                issue_number: event,
                body: body,
              });
              if (response_cc.status > 201 || !response_cc.data) {
                const reason = `${event}. ${JSON.stringify(response_cc)}`;
                const message = `Failed to create comment for PR ${reason}`;
                core.setFailed(message);
                return;
              }
            } catch (e) {
              const message = `Failed to comment when done: ${e}`;
              core.setFailed(message);
            }

      - name: Dump github context
        id: dump_github_context
        if: >
          failure() || (
            success() &&
            inputs.log_severity != 'ERROR'
          )
        env:
          GH_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "${GH_CONTEXT}"

      - name: Dump steps context
        id: dump_steps_context
        if: >
          failure() || (
            success() &&
            inputs.log_severity != 'ERROR'
          )
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: |
          echo "${STEPS_CONTEXT}"

      - name: Print variables and event
        id: dump_env
        if: >
          failure() || (
            success() &&
            inputs.log_severity != 'ERROR'
          )
        uses: hmarr/debug-action@v2
