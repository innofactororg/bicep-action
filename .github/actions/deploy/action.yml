# Copyright (c) Innofactor Plc & AUTHORS
# SPDX-License-Identifier: BSD-3-Clause
#
name: Create deployment
author: Innofactor Plc
description: Deploy Azure infrastructure.
branding:
  icon: edit
  color: blue
inputs:
  auto_merge:
    description: "Auto merge method to use after successful deployment."
    required: false
    default: "squash"
  azure_client_id:
    description: "The client ID of the service principal for Azure login."
    required: true
  azure_client_secret:
    description: "The client secret of the service principal for Azure login."
    required: false
    default: ""
  azure_providers:
    description: "A comma separated list of Azure resource providers."
    required: false
    default: ""
  azure_provider_wait_count:
    description: "Times to check provider status before giving up."
    required: false
    default: 30
  azure_provider_wait_seconds:
    description: "Seconds to wait between each provider status check."
    required: false
    default: 10
  azure_subscription_id:
    description: "The subscription ID in which to deploy the resources."
    required: true
  azure_tenant_id:
    description: "The tenant ID in which the subscription exists."
    required: true
  location:
    description: "The Azure location to store the deployment metadata."
    required: true
  log_severity:
    description: "The log verbosity."
    required: false
    default: "ERROR"
  management_group:
    description: "Management group to create deployment at for mg scope."
    required: false
    default: ""
  resource_group:
    description: "Resource group to create deployment at for group scope."
    required: false
    default: ""
  scope:
    description: "The deployment scope. Accepted: tenant, mg, sub, group."
    required: true
  template:
    description: "The template address."
    required: true
  template_parameters:
    description: "Deployment parameter values."
    required: false
    default: ""
  token:
    description: "GitHub token used to comment on pull request and to enable auto-merge."
    required: false
    default: ${{ github.token }}
runs:
  using: composite
  steps:
    - name: Add scripts to system path
      shell: bash
      run: |
        folder=$(readlink -f "${GITHUB_ACTION_PATH}/../../../scripts")
        echo "Script folder: ${folder}"
        echo "${folder}" >> "${GITHUB_PATH}"

    - name: Install tools
      env:
        IN_SEVERITY: ${{ inputs.log_severity }}
        IN_TEMPLATE: ${{ inputs.template }}
        LOG_NAME: install_tools
        LOG_ORDER: b1
        LOG_PATH: ${{ runner.workspace }}/logs
      shell: bash
      run: install-tools.sh

    - name: Azure login
      env:
        IN_SEVERITY: ${{ inputs.log_severity }}
        CLIENT_ID: ${{ inputs.azure_client_id }}
        CLIENT_SECRET: ${{ inputs.azure_client_secret }}
        LOG_NAME: azure_login
        LOG_ORDER: b2
        LOG_PATH: ${{ runner.workspace }}/logs
        SUBSCRIPTION_ID: ${{ inputs.azure_subscription_id }}
        TENANT_ID: ${{ inputs.azure_tenant_id }}
      shell: bash
      run: az-login.sh

    - name: Check resource providers
      if: inputs.azure_providers != ''
      env:
        IN_PROVIDERS: ${{ inputs.azure_providers }}
        IN_SEVERITY: ${{ inputs.log_severity }}
        LOG_NAME: check_providers
        LOG_ORDER: b3
        LOG_PATH: ${{ runner.workspace }}/logs
        WAIT_COUNT: ${{ inputs.azure_provider_wait_count }}
        WAIT_SECONDS: ${{ inputs.azure_provider_wait_seconds }}
      shell: bash
      run: azure-providers.sh

    - name: Create deployment
      env:
        IN_LOCATION: ${{ inputs.location }}
        IN_MANAGEMENT_GROUP: ${{ inputs.management_group }}
        IN_RESOURCE_GROUP: ${{ inputs.resource_group }}
        IN_SCOPE: ${{ inputs.scope }}
        IN_SEVERITY: ${{ inputs.log_severity }}
        IN_TEMPLATE: ${{ inputs.template }}
        IN_TEMPLATE_PARAMS: ${{ inputs.template_parameters }}
        LOG_NAME: create_deployment
        LOG_ORDER: a1
        LOG_PATH: ${{ runner.workspace }}/logs
        RUN_ID: ${{ github.run_id }}
        SOURCE_PATH: ${{ github.workspace }}
      shell: bash
      run: az-deploy.sh create

    - name: Enable auto merge
      if: >
        (
          github.event_name == 'pull_request' ||
          github.event_name == 'pull_request_target'
        ) &&
        contains(
          fromJSON('["merge", "squash", "rebase"]'), inputs.auto_merge
        )
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea #v7.0.1
      env:
        METHOD: ${{ inputs.auto_merge }}
      with:
        github-token: ${{ inputs.token }}
        script: |
          const {METHOD} = process.env;
          try {
            const response = await github.graphql(`
              mutation {
                enablePullRequestAutoMerge(input: {
                  pullRequestId: "${context.payload.pull_request.node_id}",
                  mergeMethod: ${METHOD.toUpperCase()},
                }) {
                  pullRequest {
                    autoMergeRequest {
                      enabledAt
                    }
                  }
                }
              }
            `);
            core.info('Auto-merge enabled!');
          } catch (e) {
            const msg = `Failed to enable auto-merge! ${e}`;
            core.info(msg);
            core.setFailed(msg);
          }

    - name: Job cancelled
      if: cancelled()
      shell: bash
      run: echo 'JOB_STATUS=cancelled' >> "$GITHUB_ENV"

    - name: Job failed
      if: failure()
      shell: bash
      run: echo 'JOB_STATUS=failed' >> "$GITHUB_ENV"

    - name: Add comment
      if: >
        always() &&
        (
          github.event_name == 'pull_request' ||
          github.event_name == 'pull_request_target'
        )
      env:
        COMMENTS_URL: ${{ github.event.pull_request.comments_url }}
        COMMIT_SHA: ${{ github.sha }}
        EVENT_ACTION: ${{ github.event.action }}
        EVENT_ACTOR: ${{ github.actor }}
        EVENT_NO: "#${{ github.event.number }}"
        JOB_NAME: ${{ github.workflow }}
        JOB_STATUS: ${{ env.JOB_STATUS }}
        JOB_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        LOG_NAME: deploy_comment
        LOG_PATH: ${{ runner.workspace }}/logs
        RUN_NUMBER: ${{ github.run_number }}
        TOKEN: ${{ inputs.token }}
      shell: bash
      run: pr-comment.sh

    - name: Show debug info
      if: >
        (
          success() &&
          inputs.log_severity != 'ERROR'
        ) || failure()
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea #v7.0.1
      with:
        github-token: ${{ inputs.token }}
        script: |
          const fs = require('fs');
          const event = JSON.parse(fs.readFileSync(process.env['GITHUB_EVENT_PATH']));
          console.log('::group::environment variables');
          console.log('::stop-commands::77e6a57ef9854574');
          for (const [key, value] of Object.entries(process.env).sort()) {
            if (key != 'INPUT_SCRIPT') {
              console.log(`${key}=${value}`);
            }
          }
          console.log('::77e6a57ef9854574::');
          console.log('::endgroup::');
          console.log('::group::github event');
          console.log('::stop-commands::77e6a57ef9854574');
          console.log(JSON.stringify(event, null, 2));
          console.log('::77e6a57ef9854574::');
          console.log('::endgroup::');

    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@ef09cdac3e2d3e60d8ccadda691f4f1cec5035cb #v4.3.1 + 3 commits
      with:
        if-no-files-found: ignore
        name: deploy_logs
        path: ${{ runner.workspace }}/logs/
