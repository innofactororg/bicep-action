trigger: none
pr:
  autoCancel: true
  drafts: false

name: Azure Deploy

variables:
  AZURE_PROVIDERS: Microsoft.Advisor,Microsoft.AlertsManagement,Microsoft.Authorization,Microsoft.Consumption,Microsoft.EventGrid,microsoft.insights,Microsoft.ManagedIdentity,Microsoft.Management,Microsoft.Network,Microsoft.PolicyInsights,Microsoft.ResourceHealth,Microsoft.Resources,Microsoft.Security
  AZURE_PROVIDER_WAIT_SECONDS: 10
  AZURE_PROVIDER_WAIT_COUNT: 30
  AZURE_SUBSCRIPTION_ID: d0d0d0d0-ed29-4694-ac26-2e358c364506
  COST_THRESHOLD: -1
  CURRENCY: EUR
  ENVIRONMENT: production
  LOCATION: westeurope
  LOG_SEVERITY: INFO
  MANAGEMENT_GROUP:
  RESOURCE_GROUP:
  RULE_BASELINE: Azure.Default
  RULE_MODULES: Az.Resources,PSRule.Rules.Azure
  RULE_OPTION: ps-rule.yaml
  SCOPE: sub
  SERVICE_CONNECTION: ifsandboxvdc01_arm_connection
  TEMPLATE: main.bicep
  TEMPLATE_PARAMETERS: main.bicepparam
  VERSION_ACE_TOOL: 1.4
  WORKFLOW_VERSION: beta6

pool:
  vmImage: ubuntu-22.04

stages:
  - stage: Plan
    jobs:
      - job: plan
        displayName: Plan deployment
        steps:
          - checkout: self
            displayName: Checkout
            fetchDepth: 1
            persistCredentials: true

          - task: AzureCLI@2
            displayName: Install tools
            env:
              IN_SEVERITY: ${{ variables.LOG_SEVERITY }}
              IN_TEMPLATE: ${{ variables.TEMPLATE }}
              LOG_NAME: install_tools
              LOG_ORDER: b1
              LOG_PATH: $(Pipeline.Workspace)/logs
              SCRIPT: install-tools
              VERSION: ${{ variables.WORKFLOW_VERSION }}
            inputs:
              azureSubscription: ${{ variables.SERVICE_CONNECTION }}
              scriptLocation: inlineScript
              scriptType: bash
              inlineScript: |
                uri="https://github.com/innofactororg/bicep-action/raw/${VERSION}/scripts/${SCRIPT}.sh"
                echo "Download ${uri}"
                HTTP_CODE=$(curl -sSL --remote-name --retry 4 \
                  --write-out "%{response_code}" \
                  --header 'Accept: application/vnd.github.raw' "${uri}"
                )
                if [[ "${HTTP_CODE}" -lt 200 || "${HTTP_CODE}" -gt 299 ]]; then
                  echo "##[error]Unable to get ${SCRIPT}! Response code: ${HTTP_CODE}"
                  exit 1
                fi
                chmod +x ${SCRIPT}.sh
                ./${SCRIPT}.sh

          - task: AzureCLI@2
            condition: and(succeeded(), not(startsWith(variables['TEMPLATE'], '/subscriptions/')))
            displayName: Bicep build
            env:
              IN_SEVERITY: ${{ variables.LOG_SEVERITY }}
              IN_TEMPLATE: ${{ variables.TEMPLATE }}
              LOG_NAME: bicep_build
              LOG_ORDER: b3
              LOG_PATH: $(Pipeline.Workspace)/logs
              SCRIPT: az-bicep
              SOURCE_PATH: $(Build.SourcesDirectory)
              VERSION: ${{ variables.WORKFLOW_VERSION }}
            name: bicep_build
            inputs:
              azureSubscription: ${{ variables.SERVICE_CONNECTION }}
              scriptLocation: inlineScript
              scriptType: bash
              inlineScript: |
                uri="https://github.com/innofactororg/bicep-action/raw/${VERSION}/scripts/${SCRIPT}.sh"
                echo "Download ${uri}"
                HTTP_CODE=$(curl -sSL --remote-name --retry 4 \
                  --write-out "%{response_code}" \
                  --header 'Accept: application/vnd.github.raw' "${uri}"
                )
                if [[ "${HTTP_CODE}" -lt 200 || "${HTTP_CODE}" -gt 299 ]]; then
                  echo "##[error]Unable to get ${SCRIPT}! Response code: ${HTTP_CODE}"
                  exit 1
                fi
                chmod +x ${SCRIPT}.sh
                ./${SCRIPT}.sh build

          - task: AzureCLI@2
            condition: and(succeeded(), not(eq(variables['TEMPLATE_PARAMETERS'], '')))
            displayName: Bicep build params
            env:
              IN_SEVERITY: ${{ variables.LOG_SEVERITY }}
              IN_TEMPLATE: ${{ variables.TEMPLATE_PARAMETERS }}
              LOG_NAME: bicep_build_params
              LOG_ORDER: b4
              LOG_PATH: $(Pipeline.Workspace)/logs
              SCRIPT: az-bicep
              SOURCE_PATH: $(Build.SourcesDirectory)
              VERSION: ${{ variables.WORKFLOW_VERSION }}
            name: bicep_build_params
            inputs:
              azureSubscription: ${{ variables.SERVICE_CONNECTION }}
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                uri="https://github.com/innofactororg/bicep-action/raw/${VERSION}/scripts/${SCRIPT}.sh"
                echo "Download ${uri}"
                HTTP_CODE=$(curl -sSL --remote-name --retry 4 \
                  --write-out "%{response_code}" \
                  --header 'Accept: application/vnd.github.raw' "${uri}"
                )
                if [[ "${HTTP_CODE}" -lt 200 || "${HTTP_CODE}" -gt 299 ]]; then
                  echo "##[error]Unable to get ${SCRIPT}! Response code: ${HTTP_CODE}"
                  exit 1
                fi
                chmod +x ${SCRIPT}.sh
                ./${SCRIPT}.sh build-params

          - task: AzureCLI@2
            displayName: Validate
            env:
              IN_LOCATION: ${{ variables.LOCATION }}
              IN_MANAGEMENT_GROUP: ${{ variables.MANAGEMENT_GROUP }}
              IN_PROVIDERS: ${{ variables.AZURE_PROVIDERS }}
              IN_RESOURCE_GROUP: ${{ variables.RESOURCE_GROUP }}
              IN_SCOPE: ${{ variables.SCOPE }}
              IN_SEVERITY: ${{ variables.LOG_SEVERITY }}
              IN_TEMPLATE: ${{ variables.TEMPLATE }}
              IN_TEMPLATE_PARAMS: ${{ variables.TEMPLATE_PARAMETERS }}
              LOG_NAME: validate
              LOG_ORDER: b5
              LOG_PATH: $(Pipeline.Workspace)/logs
              RUN_ID: $(Build.BuildId)
              SCRIPT: az-deploy
              SOURCE_PATH: $(Build.SourcesDirectory)
              SUBSCRIPTION_ID: ${{ variables.AZURE_SUBSCRIPTION_ID }}
              VERSION: ${{ variables.WORKFLOW_VERSION }}
            name: validate
            inputs:
              azureSubscription: ${{ variables.SERVICE_CONNECTION }}
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                uri="https://github.com/innofactororg/bicep-action/raw/${VERSION}/scripts/${SCRIPT}.sh"
                echo "Download ${uri}"
                HTTP_CODE=$(curl -sSL --remote-name --retry 4 \
                  --write-out "%{response_code}" \
                  --header 'Accept: application/vnd.github.raw' "${uri}"
                )
                if [[ "${HTTP_CODE}" -lt 200 || "${HTTP_CODE}" -gt 299 ]]; then
                  echo "##[error]Unable to get ${SCRIPT}! Response code: ${HTTP_CODE}"
                  exit 1
                fi
                chmod +x ${SCRIPT}.sh
                ./${SCRIPT}.sh validate

          - task: AzureCLI@2
            displayName: What-if
            env:
              IN_LOCATION: ${{ variables.LOCATION }}
              IN_MANAGEMENT_GROUP: ${{ variables.MANAGEMENT_GROUP }}
              IN_RESOURCE_GROUP: ${{ variables.RESOURCE_GROUP }}
              IN_SCOPE: ${{ variables.SCOPE }}
              IN_SEVERITY: ${{ variables.LOG_SEVERITY }}
              IN_TEMPLATE: ${{ variables.TEMPLATE }}
              IN_TEMPLATE_PARAMS: ${{ variables.TEMPLATE_PARAMETERS }}
              LOG_NAME: what-if
              LOG_ORDER: a1
              LOG_PATH: $(Pipeline.Workspace)/logs
              RUN_ID: $(Build.BuildId)
              SCRIPT: az-deploy
              SOURCE_PATH: $(Build.SourcesDirectory)
              SUBSCRIPTION_ID: ${{ variables.AZURE_SUBSCRIPTION_ID }}
              VERSION: ${{ variables.WORKFLOW_VERSION }}
            inputs:
              azureSubscription: ${{ variables.SERVICE_CONNECTION }}
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                uri="https://github.com/innofactororg/bicep-action/raw/${VERSION}/scripts/${SCRIPT}.sh"
                echo "Download ${uri}"
                HTTP_CODE=$(curl -sSL --remote-name --retry 4 \
                  --write-out "%{response_code}" \
                  --header 'Accept: application/vnd.github.raw' "${uri}"
                )
                if [[ "${HTTP_CODE}" -lt 200 || "${HTTP_CODE}" -gt 299 ]]; then
                  echo "##[error]Unable to get ${SCRIPT}! Response code: ${HTTP_CODE}"
                  exit 1
                fi
                chmod +x ${SCRIPT}.sh
                ./${SCRIPT}.sh what-if

          - task: Bash@3
            condition: and(succeeded(), not(eq(variables['RULE_OPTION'], '')))
            displayName: PSRule config
            env:
              LOG_NAME: psrule_config
              LOG_PATH: $(Pipeline.Workspace)/logs
              OPTION: ${{ variables.RULE_OPTION }}
              SCRIPT: psrule-config
              TEMPLATE_FILE: $(bicep_build.file)
              TEMPLATE_PARAMS_FILE: $(bicep_build_params.file)
              VERSION: ${{ variables.WORKFLOW_VERSION }}
            inputs:
              targetType: inline
              script: |
                if [[ "${TEMPLATE_FILE}" == *bicep_build.file* ]]; then
                  echo 'The bicep_build.file output has not been set!'
                  export TEMPLATE_FILE=''
                fi
                if [[ "${TEMPLATE_PARAMS_FILE}" == *bicep_build_params.file* ]]; then
                  echo 'The bicep_build_params.file output has not been set!'
                  export TEMPLATE_PARAMS_FILE=''
                fi
                uri="https://github.com/innofactororg/bicep-action/raw/${VERSION}/scripts/${SCRIPT}.sh"
                echo "Download ${uri}"
                HTTP_CODE=$(curl -sSL --remote-name --retry 4 \
                  --write-out "%{response_code}" \
                  --header 'Accept: application/vnd.github.raw' "${uri}"
                )
                if [[ "${HTTP_CODE}" -lt 200 || "${HTTP_CODE}" -gt 299 ]]; then
                  echo "##[error]Unable to get ${SCRIPT}! Response code: ${HTTP_CODE}"
                  exit 1
                fi
                chmod +x ${SCRIPT}.sh
                ./${SCRIPT}.sh

          - task: ps-rule-assert@2
            condition: and(succeeded(), not(eq(variables['RULE_OPTION'], '')), eq(variables['psrule_config.error'], ''))
            displayName: PSRule analysis
            inputs:
              baseline: ${{ variables.RULE_BASELINE }}
              inputPath: $(Build.SourcesDirectory)
              inputType: repository
              modules: ${{ variables.RULE_MODULES }}
              option: ${{ variables.RULE_OPTION }}
              outputFormat: Markdown
              outputPath: $(Pipeline.Workspace)/logs/psrule_analysis.md
              summary: false

          - task: Bash@3
            condition: and(not(eq(variables['RULE_OPTION'], '')), or(succeeded(), failed()))
            displayName: PSRule report
            env:
              CONFIG_ERROR: $(psrule_config.error)
              LOG_NAME: psrule_report
              LOG_ORDER: b6
              LOG_PATH: $(Pipeline.Workspace)/logs
              SCRIPT: psrule-report
              VERSION: ${{ variables.WORKFLOW_VERSION }}
            inputs:
              targetType: inline
              script: |
                if [[ "${CONFIG_ERROR}" == *psrule_config.error* ]]; then
                  echo 'The psrule_config.error output has not been set!'
                  export CONFIG_ERROR=''
                fi
                uri="https://github.com/innofactororg/bicep-action/raw/${VERSION}/scripts/${SCRIPT}.sh"
                echo "Download ${uri}"
                HTTP_CODE=$(curl -sSL --remote-name --retry 4 \
                  --write-out "%{response_code}" \
                  --header 'Accept: application/vnd.github.raw' "${uri}"
                )
                if [[ "${HTTP_CODE}" -lt 200 || "${HTTP_CODE}" -gt 299 ]]; then
                  echo "##[error]Unable to get ${SCRIPT}! Response code: ${HTTP_CODE}"
                  exit 1
                fi
                chmod +x ${SCRIPT}.sh
                ./${SCRIPT}.sh

          - task: AzureCLI@2
            condition: and(succeeded(), not(eq(variables['bicep_build.file'], '')))
            displayName: Cost estimate
            env:
              IN_CURRENCY: ${{ variables.CURRENCY }}
              IN_LOCATION: ${{ variables.LOCATION }}
              IN_MANAGEMENT_GROUP: ${{ variables.MANAGEMENT_GROUP }}
              IN_RESOURCE_GROUP: ${{ variables.RESOURCE_GROUP }}
              IN_SCOPE: ${{ variables.SCOPE }}
              IN_TEMPLATE_PARAMS: ${{ variables.TEMPLATE_PARAMETERS }}
              LOG_NAME: cost_estimate
              LOG_ORDER: a2
              LOG_PATH: $(Pipeline.Workspace)/logs
              SCRIPT: azure-cost
              SUBSCRIPTION_ID: ${{ variables.AZURE_SUBSCRIPTION_ID }}
              TEMPLATE_FILE: $(bicep_build.file)
              TEMPLATE_PARAMS_FILE: $(bicep_build_params.file)
              THRESHOLD: ${{ variables.COST_THRESHOLD }}
              VERSION: ${{ variables.WORKFLOW_VERSION }}
              VERSION_ACE: ${{ variables.VERSION_ACE_TOOL }}
            inputs:
              azureSubscription: ${{ variables.SERVICE_CONNECTION }}
              scriptLocation: inlineScript
              scriptType: bash
              inlineScript: |
                if [[ "${TEMPLATE_FILE}" == *bicep_build.file* ]]; then
                  echo '##[error]The bicep_build.file output has not been set!'
                  exit 1
                fi
                if [[ "${TEMPLATE_PARAMS_FILE}" == *bicep_build_params.file* ]]; then
                  echo 'The bicep_build_params.file output has not been set!'
                  export TEMPLATE_PARAMS_FILE=''
                fi
                uri="https://github.com/innofactororg/bicep-action/raw/${VERSION}/scripts/${SCRIPT}.sh"
                echo "Download ${uri}"
                HTTP_CODE=$(curl -sSL --remote-name --retry 4 \
                  --write-out "%{response_code}" \
                  --header 'Accept: application/vnd.github.raw' "${uri}"
                )
                if [[ "${HTTP_CODE}" -lt 200 || "${HTTP_CODE}" -gt 299 ]]; then
                  echo "##[error]Unable to get ${SCRIPT}! Response code: ${HTTP_CODE}"
                  exit 1
                fi
                chmod +x ${SCRIPT}.sh
                ./${SCRIPT}.sh

          - task: Bash@3
            condition: and(always(), eq(variables['Build.Reason'], 'PullRequest'))
            displayName: Add comment
            env:
              COMMENTS_URL: $(System.CollectionUri)$(System.TeamProject)/_apis/git/repositories/$(Build.Repository.Name)/pullRequests/$(System.PullRequest.PullRequestId)/threads?api-version=7.1-preview.1
              COMMIT_SHA: $(System.PullRequest.SourceCommitId)
              COMMIT_URL: $(System.CollectionUri)$(System.TeamProject)/_git/$(Build.Repository.Name)/commit/$(System.PullRequest.SourceCommitId)
              EVENT_ACTION: $(Build.Reason)
              EVENT_ACTOR: $(Build.SourceVersionAuthor)
              EVENT_NO: "[$(System.PullRequest.PullRequestId)]($(Build.BuildUri))"
              JOB_NAME: $(Build.BuildNumber)
              JOB_STATUS: $(Agent.JobStatus)
              JOB_URL: $(System.CollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)
              LOG_NAME: plan_comment
              LOG_PATH: $(Pipeline.Workspace)/logs
              RUN_NUMBER: $(Build.BuildId)
              SCRIPT: pr-comment
              TOKEN: $(System.AccessToken)
              VERSION: ${{ variables.WORKFLOW_VERSION }}
            inputs:
              targetType: inline
              script: |
                export COMMIT_SHA="[${COMMIT_SHA:0:8}](${COMMIT_URL})"
                uri="https://github.com/innofactororg/bicep-action/raw/${VERSION}/scripts/${SCRIPT}.sh"
                echo "Download ${uri}"
                HTTP_CODE=$(curl -sSL --remote-name --retry 4 \
                  --write-out "%{response_code}" \
                  --header 'Accept: application/vnd.github.raw' "${uri}"
                )
                if [[ "${HTTP_CODE}" -lt 200 || "${HTTP_CODE}" -gt 299 ]]; then
                  echo "##[error]Unable to get ${SCRIPT}! Response code: ${HTTP_CODE}"
                  exit 1
                fi
                chmod +x ${SCRIPT}.sh
                ./${SCRIPT}.sh

          - task: Bash@3
            condition: or(failed(), and(succeeded(), not(eq(variables['LOG_SEVERITY'], 'ERROR'))))
            displayName: Show debug info
            inputs:
              targetType: inline
              script: |
                set -e
                echo '##[group]environment variables'
                for var in $(compgen -e); do
                  echo "${var} ${!var}"
                done
                echo '##[endgroup]'

          - task: PublishPipelineArtifact@1
            condition: always()
            displayName: Upload logs
            inputs:
              artifact: plan_logs
              publishLocation: pipeline
              targetPath: $(Pipeline.Workspace)/logs

  - stage: Deploy
    dependsOn: Plan
    jobs:
      - deployment: create
        displayName: Create deployment
        environment: ${{ variables.ENVIRONMENT }}
        variables:
          plan_providers: $[ stageDependencies.Plan.plan.outputs['validate.providers'] ]
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                - checkout: self
                  displayName: Checkout
                  fetchDepth: 1
                  persistCredentials: true

                - task: AzureCLI@2
                  displayName: Install tools
                  env:
                    IN_SEVERITY: ${{ variables.LOG_SEVERITY }}
                    IN_TEMPLATE: ${{ variables.TEMPLATE }}
                    LOG_NAME: install_tools
                    LOG_ORDER: b1
                    LOG_PATH: $(Pipeline.Workspace)/logs
                    SCRIPT: install-tools
                    VERSION: ${{ variables.WORKFLOW_VERSION }}
                  inputs:
                    azureSubscription: ${{ variables.SERVICE_CONNECTION }}
                    scriptLocation: inlineScript
                    scriptType: bash
                    inlineScript: |
                      uri="https://github.com/innofactororg/bicep-action/raw/${VERSION}/scripts/${SCRIPT}.sh"
                      echo "Download ${uri}"
                      HTTP_CODE=$(curl -sSL --remote-name --retry 4 \
                        --write-out "%{response_code}" \
                        --header 'Accept: application/vnd.github.raw' "${uri}""
                      )
                      if [[ "${HTTP_CODE}" -lt 200 || "${HTTP_CODE}" -gt 299 ]]; then
                        echo "##[error]Unable to get ${SCRIPT}! Response code: ${HTTP_CODE}"
                        exit 1
                      fi
                      chmod +x ${SCRIPT}.sh
                      ./${SCRIPT}.sh

                - task: AzureCLI@2
                  condition: and(succeeded(), not(eq(variables['plan_providers'], '')))
                  displayName: Check Azure providers
                  env:
                    IN_PROVIDERS: $(plan_providers)
                    IN_SEVERITY: ${{ variables.LOG_SEVERITY }}
                    LOG_NAME: check_providers
                    LOG_ORDER: b3
                    LOG_PATH: $(Pipeline.Workspace)/logs
                    SCRIPT: azure-providers
                    SUBSCRIPTION_ID: ${{ variables.AZURE_SUBSCRIPTION_ID }}
                    VERSION: ${{ variables.WORKFLOW_VERSION }}
                    WAIT_COUNT: ${{ variables.AZURE_PROVIDER_WAIT_COUNT }}
                    WAIT_SECONDS: ${{ variables.AZURE_PROVIDER_WAIT_SECONDS }}
                  inputs:
                    azureSubscription: ${{ variables.SERVICE_CONNECTION }}
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      if [[ "${IN_PROVIDERS}" == *plan_providers* ]]; then
                        echo 'Skip! The plan.validate.providers output has not been set!'
                        exit
                      fi
                      uri="https://github.com/innofactororg/bicep-action/raw/${VERSION}/scripts/${SCRIPT}.sh"
                      echo "Download ${uri}"
                      HTTP_CODE=$(curl -sSL --remote-name --retry 4 \
                        --write-out "%{response_code}" \
                        --header 'Accept: application/vnd.github.raw' "${uri}""
                      )
                      if [[ "${HTTP_CODE}" -lt 200 || "${HTTP_CODE}" -gt 299 ]]; then
                        echo "##[error]Unable to get ${SCRIPT}! Response code: ${HTTP_CODE}"
                        exit 1
                      fi
                      chmod +x ${SCRIPT}.sh
                      ./${SCRIPT}.sh

                - task: AzureCLI@2
                  displayName: Deploy
                  env:
                    IN_LOCATION: ${{ variables.LOCATION }}
                    IN_MANAGEMENT_GROUP: ${{ variables.MANAGEMENT_GROUP }}
                    IN_RESOURCE_GROUP: ${{ variables.RESOURCE_GROUP }}
                    IN_SCOPE: ${{ variables.SCOPE }}
                    IN_SEVERITY: ${{ variables.LOG_SEVERITY }}
                    IN_TEMPLATE: ${{ variables.TEMPLATE }}
                    IN_TEMPLATE_PARAMS: ${{ variables.TEMPLATE_PARAMETERS }}
                    LOG_NAME: deploy
                    LOG_ORDER: a1
                    LOG_PATH: $(Pipeline.Workspace)/logs
                    RUN_ID: $(Build.BuildId)
                    SCRIPT: az-deploy
                    SOURCE_PATH: $(Build.SourcesDirectory)
                    SUBSCRIPTION_ID: ${{ variables.AZURE_SUBSCRIPTION_ID }}
                    VERSION: ${{ variables.WORKFLOW_VERSION }}
                  inputs:
                    azureSubscription: ${{ variables.SERVICE_CONNECTION }}
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      uri="https://github.com/innofactororg/bicep-action/raw/${VERSION}/scripts/${SCRIPT}.sh"
                      echo "Download ${uri}"
                      HTTP_CODE=$(curl -sSL --remote-name --retry 4 \
                        --write-out "%{response_code}" \
                        --header 'Accept: application/vnd.github.raw' "${uri}""
                      )
                      if [[ "${HTTP_CODE}" -lt 200 || "${HTTP_CODE}" -gt 299 ]]; then
                        echo "##[error]Unable to get ${SCRIPT}! Response code: ${HTTP_CODE}"
                        exit 1
                      fi
                      chmod +x ${SCRIPT}.sh
                      ./${SCRIPT}.sh create

                - task: Bash@3
                  condition: and(always(), eq(variables['Build.Reason'], 'PullRequest'))
                  displayName: Add comment
                  env:
                    COMMENTS_URL: $(System.CollectionUri)$(System.TeamProject)/_apis/git/repositories/$(Build.Repository.Name)/pullRequests/$(System.PullRequest.PullRequestId)/threads?api-version=7.1-preview.1
                    COMMIT_SHA: $(System.PullRequest.SourceCommitId)
                    COMMIT_URL: $(System.CollectionUri)$(System.TeamProject)/_git/$(Build.Repository.Name)/commit/$(System.PullRequest.SourceCommitId)
                    EVENT_ACTION: $(Build.Reason)
                    EVENT_ACTOR: $(Build.SourceVersionAuthor)
                    EVENT_NO: "[$(System.PullRequest.PullRequestId)]($(Build.BuildUri))"
                    JOB_NAME: $(Build.BuildNumber)
                    JOB_STATUS: $(Agent.JobStatus)
                    JOB_URL: $(System.CollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)
                    LOG_NAME: deploy_comment
                    LOG_PATH: $(Pipeline.Workspace)/logs
                    RUN_NUMBER: $(Build.BuildId)
                    SCRIPT: pr-comment
                    TOKEN: $(System.AccessToken)
                    VERSION: ${{ variables.WORKFLOW_VERSION }}
                  inputs:
                    targetType: inline
                    script: |
                      export COMMIT_SHA="[${COMMIT_SHA:0:8}](${COMMIT_URL})"
                      uri="https://github.com/innofactororg/bicep-action/raw/${VERSION}/scripts/${SCRIPT}.sh"
                      echo "Download ${uri}"
                      HTTP_CODE=$(curl -sSL --remote-name --retry 4 \
                        --write-out "%{response_code}" \
                        --header 'Accept: application/vnd.github.raw' "${uri}"
                      )
                      if [[ "${HTTP_CODE}" -lt 200 || "${HTTP_CODE}" -gt 299 ]]; then
                        echo "##[error]Unable to get ${SCRIPT}! Response code: ${HTTP_CODE}"
                        exit 1
                      fi
                      chmod +x ${SCRIPT}.sh
                      ./${SCRIPT}.sh

                - task: Bash@3
                  condition: or(failed(), and(succeeded(), not(eq(variables['LOG_SEVERITY'], 'ERROR'))))
                  displayName: Show debug info
                  inputs:
                    targetType: inline
                    script: |
                      set -e
                      echo '##[group]environment variables'
                      for var in $(compgen -e); do
                        echo "${var} ${!var}"
                      done
                      echo '##[endgroup]'

                - task: PublishPipelineArtifact@1
                  displayName: Upload logs
                  condition: always()
                  inputs:
                    targetPath: $(Pipeline.Workspace)/logs
                    artifact: deploy_logs
                    publishLocation: pipeline
